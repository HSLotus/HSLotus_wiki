<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HsLotus的知识wiki</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-06T03:20:14.149Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>HsLotus</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python-杂项</title>
    <link href="http://example.com/wiki/python-%E6%9D%82%E9%A1%B9/"/>
    <id>http://example.com/wiki/python-%E6%9D%82%E9%A1%B9/</id>
    <published>2021-04-06T02:56:35.000Z</published>
    <updated>2021-04-06T03:20:14.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raw_input(<span class="string">&quot;按下 enter 键退出，其他任意键显示...\n&quot;</span>)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;等待用户输入&quot;&gt;&lt;a href=&quot;#等待用户输入&quot; class=&quot;headerlink&quot; title=&quot;等待用户输入&quot;&gt;&lt;/a&gt;等待用户输入&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;raw_input(&lt;span class=&quot;string&quot;&gt;&amp;quot;按下 enter 键退出，其他任意键显示...\n&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-numpy库</title>
    <link href="http://example.com/wiki/python-numpy%E5%BA%93/"/>
    <id>http://example.com/wiki/python-numpy%E5%BA%93/</id>
    <published>2021-04-06T02:56:13.000Z</published>
    <updated>2021-04-07T09:16:40.891Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-迭代器</title>
    <link href="http://example.com/wiki/python-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://example.com/wiki/python-%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2021-04-06T02:55:45.000Z</published>
    <updated>2021-04-07T09:16:59.285Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-字符串</title>
    <link href="http://example.com/wiki/python-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/wiki/python-%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-04-06T02:54:39.000Z</published>
    <updated>2021-04-07T09:16:44.383Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-循环语句与条件语句</title>
    <link href="http://example.com/wiki/python-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>http://example.com/wiki/python-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</id>
    <published>2021-04-06T02:54:22.000Z</published>
    <updated>2021-04-07T09:16:54.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="if-条件语句"><a href="#if-条件语句" class="headerlink" title="if 条件语句"></a>if 条件语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">    执行语句<span class="number">1</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">    执行语句<span class="number">2</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">    执行语句<span class="number">3</span>……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    执行语句<span class="number">4</span>……</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm0mcxrg30ci07o47l.gif"></p><span id="more"></span><h2 id="While-循环语句"><a href="#While-循环语句" class="headerlink" title="While 循环语句"></a>While 循环语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件(condition)：</span><br><span class="line">    执行语句(statements)……</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2013/11/loop-over-python-list-animation.gif"></p><h2 id="For-循环语句"><a href="#For-循环语句" class="headerlink" title="For 循环语句"></a>For 循环语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence:</span><br><span class="line">   statements(s)</span><br></pre></td></tr></table></figure><h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><p>实例：使用嵌套循环输出2~100之间的素数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">100</span>):</span><br><span class="line">   j = <span class="number">2</span></span><br><span class="line">   <span class="keyword">while</span>(j &lt;= (i/j)):</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span>(i%j): <span class="keyword">break</span></span><br><span class="line">      j = j + <span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> (j &gt; i/j) : <span class="built_in">print</span> i, <span class="string">&quot; 是素数&quot;</span></span><br><span class="line">   i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h2><p>break语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。<br><img src="https://www.runoob.com/wp-content/uploads/2014/09/E5A591EF-6515-4BCB-AEAA-A97ABEFC5D7D.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> var &gt; <span class="number">0</span>:              </span><br><span class="line">   <span class="built_in">print</span> <span class="string">&#x27;当前变量值 :&#x27;</span>, var</span><br><span class="line">   var = var -<span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> var == <span class="number">5</span>:   <span class="comment"># 当变量 var 等于 5 时退出循环</span></span><br><span class="line">      <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h2><p>continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。<br><img src="https://www.runoob.com/wp-content/uploads/2014/09/8962A4F1-B78C-4877-B328-903366EA1470.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> var &gt; <span class="number">0</span>:              </span><br><span class="line">   var = var -<span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> var == <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   <span class="built_in">print</span> <span class="string">&#x27;当前变量值 :&#x27;</span>, var</span><br></pre></td></tr></table></figure><h2 id="pass-语句"><a href="#pass-语句" class="headerlink" title="pass 语句"></a>pass 语句</h2><p>Python pass 是空语句，是为了保持程序结构的完整性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;if-条件语句&quot;&gt;&lt;a href=&quot;#if-条件语句&quot; class=&quot;headerlink&quot; title=&quot;if 条件语句&quot;&gt;&lt;/a&gt;if 条件语句&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; 判断条件&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; 判断条件&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; 判断条件&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;……&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm0mcxrg30ci07o47l.gif&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-运算符</title>
    <link href="http://example.com/wiki/python-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://example.com/wiki/python-%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-04-06T02:53:48.000Z</published>
    <updated>2021-04-07T09:16:53.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>假设 a = 10，b = 20<br>运算符|描述|实例<br>–|–|–<br>+|加 - 两个对象相加|a + b 输出结果 30<br>-|减 - 得到负数或是一个数减去另一个数|a - b 输出结果 -10<br>*|乘 - 两个数相乘或是返回一个被重复若干次的字符串|a * b 输出结果 200<br>/|除 - x除以y|b / a 输出结果 2<br>%|取模 - 返回除法的余数|b % a 输出结果 0<br>**|幂 - 返回x的y次幂|a**b 为10的20次方， 输出结果 100000000000000000000<br>//|取整除 - 返回商的整数部分（向下取整）|9//2=4 -9//2=5</p><span id="more"></span><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>等于 - 比较对象是否相等</td><td>(a == b) 返回 False。</td></tr><tr><td>!=</td><td>不等于 - 比较两个对象是否不相等</td><td>(a != b) 返回 true.</td></tr><tr><td>&lt;&gt;</td><td>不等于 - 比较两个对象是否不相等。python3 已废弃。</td><td>(a &lt;&gt; b) 返回 true。这个运算符类似 != 。</td></tr><tr><td>&gt;</td><td>大于 - 返回x是否大于y</td><td>(a &gt; b) 返回 False。</td></tr><tr><td>&lt;</td><td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</td><td>(a &lt; b) 返回 true。</td></tr><tr><td>&gt;=</td><td>大于等于 - 返回x是否大于等于y。</td><td>(a &gt;= b) 返回 False。</td></tr><tr><td>&lt;=</td><td>小于等于 - 返回x是否小于等于y。</td><td>(a &lt;= b) 返回 true。</td></tr></tbody></table><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符</td><td>c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等效于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td>%=</td><td>取模赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c **= a 等效于 c = c ** a</td></tr><tr><td>//=</td><td>取整除赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td>|</td><td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td>(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td>^</td><td>按位异或运算符：当两对应的二进位相异时，结果为1</td><td>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td>~</td><td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1</td><td>(~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td></tr><tr><td>&lt;&lt;</td><td>左移动运算符：运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数字指定了移动的位数，高位丢弃，低位补0。</td><td>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，&gt;&gt; 右边的数字指定了移动的位数</td><td>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td><td>(a and b) 返回 20。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或” - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。</td><td>(a or b) 返回 10。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not(a and b) 返回 False</td></tr></tbody></table><h2 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False。</td><td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><h2 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>is 是判断两个标识符是不是引用自一个对象</td><td>x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用自不同对象</td><td>x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* / % //</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 ‘AND’</td></tr><tr><td>^ |</td><td>位运算符</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>&lt;&gt; == !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += *= **=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not and or</td><td>逻辑运算符</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;算术运算符&quot;&gt;&lt;a href=&quot;#算术运算符&quot; class=&quot;headerlink&quot; title=&quot;算术运算符&quot;&gt;&lt;/a&gt;算术运算符&lt;/h2&gt;&lt;p&gt;假设 a = 10，b = 20&lt;br&gt;运算符|描述|实例&lt;br&gt;–|–|–&lt;br&gt;+|加 - 两个对象相加|a + b 输出结果 30&lt;br&gt;-|减 - 得到负数或是一个数减去另一个数|a - b 输出结果 -10&lt;br&gt;*|乘 - 两个数相乘或是返回一个被重复若干次的字符串|a * b 输出结果 200&lt;br&gt;/|除 - x除以y|b / a 输出结果 2&lt;br&gt;%|取模 - 返回除法的余数|b % a 输出结果 0&lt;br&gt;**|幂 - 返回x的y次幂|a**b 为10的20次方， 输出结果 100000000000000000000&lt;br&gt;//|取整除 - 返回商的整数部分（向下取整）|9//2=4 -9//2=5&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python turtle库</title>
    <link href="http://example.com/wiki/python-turtle%E5%BA%93/"/>
    <id>http://example.com/wiki/python-turtle%E5%BA%93/</id>
    <published>2021-04-06T02:33:05.000Z</published>
    <updated>2021-04-07T09:14:53.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="画布-canvas"><a href="#画布-canvas" class="headerlink" title="画布(canvas)"></a>画布(canvas)</h2><p>画布就是turtle为我们展开用于绘图区域, 我们可以设置它的大小和初始位置。</p><h3 id="设置画布大小"><a href="#设置画布大小" class="headerlink" title="设置画布大小"></a>设置画布大小</h3><ol><li> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">turtle.screensize(canvwidth&#x3D;None, canvheight&#x3D;None, bg&#x3D;None)</span><br></pre></td></tr></table></figure> 参数分别为画布的宽(单位像素), 高, 背景颜色<br> 如: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">turtle.screensize(800, 600, &quot;green&quot;)</span><br><span class="line">turtle.screensize() #返回默认大小(400, 300)</span><br></pre></td></tr></table></figure></li></ol><span id="more"></span><ol start="2"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">turtle.setup(width&#x3D;0.5, height&#x3D;0.75, startx&#x3D;None, starty&#x3D;None)</span><br></pre></td></tr></table></figure>参数:<ul><li>width, height: 输入宽和高为整数时, 表示像素; 为小数时, 表示占据电脑屏幕的比例</li><li>(startx, starty): 这一坐标表示 矩形窗口左上角顶点的位置, 如果为空,则窗口位于屏幕中心<br>如:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">turtle.setup(width&#x3D;0.6, height&#x3D;0.6)</span><br><span class="line">turtle.setup(width&#x3D;800, height&#x3D;800, startx&#x3D;100, starty&#x3D;100)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h2><h3 id="画笔的状态"><a href="#画笔的状态" class="headerlink" title="画笔的状态"></a>画笔的状态</h3><p>在画布上,默认有一个坐标原点为画布中心的坐标轴, 坐标原点上有一只面朝x轴正方向小乌龟. 这里我们描述小乌龟时使用了两个词语:坐标原点(位置),面朝x轴正方向(方向), turtle绘图中, 就是使用位置方向描述小乌龟(画笔)的状态</p><h3 id="画笔的属性"><a href="#画笔的属性" class="headerlink" title="画笔的属性"></a>画笔的属性</h3><ol><li>turtle.pensize()：设置画笔的宽度。</li><li>turtle.pencolor()：没有参数传入,返回当前画笔颜色,传入参数设置画笔颜色,可以是字符串如”green”, “red”,也可以是RGB 3元组, <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pencolor(&#39;brown&#39;)</span><br><span class="line">&gt;&gt;&gt; tup &#x3D; (0.2, 0.8, 0.55)</span><br><span class="line">&gt;&gt;&gt; pencolor(tup)</span><br><span class="line">&gt;&gt;&gt; pencolor()</span><br><span class="line">&#39;#33cc8c&#39;</span><br></pre></td></tr></table></figure></li><li>turtle.speed(speed): 设置画笔移动速度,画笔绘制的速度范围[0,10]整数, 数字越大越快</li></ol><h3 id="绘图命令"><a href="#绘图命令" class="headerlink" title="绘图命令"></a>绘图命令</h3><p>操纵海龟绘图有着许多的命令,这些命令可以划分为3种:一种为运动命令，一种为画笔控制命令,还有一种是全局控制命令</p><ol><li>画笔运动命令:</li></ol><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.forward(distance)</td><td>画笔向前移动distance距离</td></tr><tr><td>turtle.backforward(distance)</td><td>画笔向后移动distance距离</td></tr><tr><td>turtle.right(degree)</td><td>绘制方向向右旋转degree度</td></tr><tr><td>turtle.exitonclick()</td><td>点击关闭图形窗口</td></tr><tr><td>turtle.penup()</td><td>抬起画笔，之后移动画笔不绘制形状</td></tr><tr><td>turtle.pendown()</td><td>落下画笔，之后移动画笔绘制形状</td></tr><tr><td>turtle.pensize()</td><td>设置画笔宽度</td></tr><tr><td>turtle.pencolor()</td><td>设置画笔颜色，常用颜色{white,black,grey,dark,green,gold,violet,purple}</td></tr></tbody></table><ol start="2"><li>画笔控制命令:</li></ol><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.pensize(width)</td><td>绘制图形时的宽度</td></tr><tr><td>turtle.pencolor()</td><td>画笔颜色</td></tr><tr><td>turtle.fillcolor(colorstring)</td><td>绘制图形的填充颜色</td></tr><tr><td>turtle.color(color1, color2)</td><td>同时设置pencolor=color1，fillcolor=color2</td></tr><tr><td>turtle.filling()</td><td>返回当前是否在填充状态</td></tr><tr><td>turtle.begin_fill()</td><td>准备开始填充图形</td></tr><tr><td>turtle.end_fill()</td><td>填充完毕</td></tr><tr><td>turtle.hideturtle()</td><td>隐藏箭头</td></tr><tr><td>turtle.showturtle()</td><td>显示箭头</td></tr></tbody></table><ol start="3"><li>全局控制命令</li></ol><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.clear()</td><td>清空turtle窗口，但是turtle的位置和状态不会改变</td></tr><tr><td>turtle.reset()</td><td>清空窗口，重置turtle状态为起始状态</td></tr><tr><td>turtle.undo()</td><td>撤销上一个turtle动作</td></tr><tr><td>turtle.isvisible()</td><td>返回当前turtle是否可见</td></tr><tr><td>stamp()</td><td>复制当前图形</td></tr><tr><td>turtle.write(s, font=(“font-name”,font-size,”font-type”))</td><td>写文本</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://zhuanlan.zhihu.com/p/90767333">python绘图工具turtle库的使用详解</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;画布-canvas&quot;&gt;&lt;a href=&quot;#画布-canvas&quot; class=&quot;headerlink&quot; title=&quot;画布(canvas)&quot;&gt;&lt;/a&gt;画布(canvas)&lt;/h2&gt;&lt;p&gt;画布就是turtle为我们展开用于绘图区域, 我们可以设置它的大小和初始位置。&lt;/p&gt;
&lt;h3 id=&quot;设置画布大小&quot;&gt;&lt;a href=&quot;#设置画布大小&quot; class=&quot;headerlink&quot; title=&quot;设置画布大小&quot;&gt;&lt;/a&gt;设置画布大小&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;turtle.screensize(canvwidth&amp;#x3D;None, canvheight&amp;#x3D;None, bg&amp;#x3D;None)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 参数分别为画布的宽(单位像素), 高, 背景颜色&lt;br&gt; 如: &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;turtle.screensize(800, 600, &amp;quot;green&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;turtle.screensize() #返回默认大小(400, 300)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="库" scheme="http://example.com/categories/python/%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>python 基础</title>
    <link href="http://example.com/wiki/python-%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/wiki/python-%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-06T02:28:32.000Z</published>
    <updated>2021-04-06T07:41:37.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-标识符"><a href="#Python-标识符" class="headerlink" title="Python 标识符"></a>Python 标识符</h2><p>在 Python 里，标识符由字母、数字、下划线组成。</p><p>在 Python 中，所有标识符可以包括英文、数字以及下划线 $_$，但不能以数字开头。</p><p>Python 中的标识符是区分大小写的。</p><p>以下划线开头的标识符是有特殊意义的。以单下划线开头 $_foo$ 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 $from xxx import *$ 而导入。</p><p>以双下划线开头的 $__foo$ 代表类的私有成员，以双下划线开头和结尾的 $<strong>foo</strong>$ 代表 Python 里特殊方法专用的标识，如 $<strong>init</strong>()$ 代表类的构造函数。</p><h2 id="Python-保留字符"><a href="#Python-保留字符" class="headerlink" title="Python 保留字符"></a>Python 保留字符</h2><table><tbody><tr><td>and</td><td>exec</td><td>not</td></tr><tr><td>assert</td><td>finally</td><td>or</td></tr><tr><td>break</td><td>for</td><td>pass</td></tr><tr><td>class</td><td>from</td><td>print</td></tr><tr><td>continue</td><td>global</td><td>raise</td></tr><tr><td>def</td><td>if</td><td>return</td></tr><tr><td>del</td><td>import</td><td>try</td></tr><tr><td>elif</td><td>in</td><td>while</td></tr><tr><td>else</td><td>is</td><td>with </td></tr><tr><td>except</td><td>lambda</td><td>yield</td></tr></tbody></table><span id="more"></span><h2 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h2><p>Python可以在同一行中使用多条语句，语句之间使用分号(;)分割。<br>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="print输出"><a href="#print输出" class="headerlink" title="print输出"></a>print输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span>(x,)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">print</span>(x,y)</span><br></pre></td></tr></table></figure><h2 id="行和缩进"><a href="#行和缩进" class="headerlink" title="行和缩进"></a>行和缩进</h2><p>Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。<br>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。</p><h2 id="Python注释"><a href="#Python注释" class="headerlink" title="Python注释"></a>Python注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h2><ul><li>Numbers（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Dictionary（字典）</li></ul><h2 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x [,base])</td><td>将x转换为一个整数</td></tr><tr><td>long(x [,base] )</td><td>将x转换为一个长整数</td></tr><tr><td>float(x)</td><td>将x转换到一个浮点数</td></tr><tr><td>complex(real [,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s 转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典。d 必须是一个序列 (key,value)元组。</td></tr><tr><td>frozenset(s)</td><td>转换为不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>unichr(x)</td><td>将一个整数转换为Unicode字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Python-标识符&quot;&gt;&lt;a href=&quot;#Python-标识符&quot; class=&quot;headerlink&quot; title=&quot;Python 标识符&quot;&gt;&lt;/a&gt;Python 标识符&lt;/h2&gt;&lt;p&gt;在 Python 里，标识符由字母、数字、下划线组成。&lt;/p&gt;
&lt;p&gt;在 Python 中，所有标识符可以包括英文、数字以及下划线 $_$，但不能以数字开头。&lt;/p&gt;
&lt;p&gt;Python 中的标识符是区分大小写的。&lt;/p&gt;
&lt;p&gt;以下划线开头的标识符是有特殊意义的。以单下划线开头 $_foo$ 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 $from xxx import *$ 而导入。&lt;/p&gt;
&lt;p&gt;以双下划线开头的 $__foo$ 代表类的私有成员，以双下划线开头和结尾的 $&lt;strong&gt;foo&lt;/strong&gt;$ 代表 Python 里特殊方法专用的标识，如 $&lt;strong&gt;init&lt;/strong&gt;()$ 代表类的构造函数。&lt;/p&gt;
&lt;h2 id=&quot;Python-保留字符&quot;&gt;&lt;a href=&quot;#Python-保留字符&quot; class=&quot;headerlink&quot; title=&quot;Python 保留字符&quot;&gt;&lt;/a&gt;Python 保留字符&lt;/h2&gt;&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;and&lt;/td&gt;&lt;td&gt;exec&lt;/td&gt;&lt;td&gt;not&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;assert&lt;/td&gt;&lt;td&gt;finally&lt;/td&gt;&lt;td&gt;or&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;break&lt;/td&gt;&lt;td&gt;for&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;class&lt;/td&gt;&lt;td&gt;from&lt;/td&gt;&lt;td&gt;print&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;continue&lt;/td&gt;&lt;td&gt;global&lt;/td&gt;&lt;td&gt;raise&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;def&lt;/td&gt;&lt;td&gt;if&lt;/td&gt;&lt;td&gt;return&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;del&lt;/td&gt;&lt;td&gt;import&lt;/td&gt;&lt;td&gt;try&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;elif&lt;/td&gt;&lt;td&gt;in&lt;/td&gt;&lt;td&gt;while&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;else&lt;/td&gt;&lt;td&gt;is&lt;/td&gt;&lt;td&gt;with &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;except&lt;/td&gt;&lt;td&gt;lambda&lt;/td&gt;&lt;td&gt;yield&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>将hexo博客部署到服务器</title>
    <link href="http://example.com/wiki/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/wiki/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-04-01T01:47:27.000Z</published>
    <updated>2021-04-05T09:33:46.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>服务器：阿里云轻量级服务器、centos7.3、1核、2G内存</li><li>hexo博客：Next主题，已经完成本地调试<span id="more"></span></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="本地计算机"><a href="#本地计算机" class="headerlink" title="本地计算机"></a>本地计算机</h3><p>本地先生成 ssh 密钥，打开cmd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>一路回车即可。<br>之后进入 C:\Users\用户名.ssh 文件夹（是隐藏文件，再文件查看中勾选隐藏文件），用记事本打开 id_rsa.pub 文件，复制并备用。</p><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>初学者建议安装宝塔面版进行操作</p><ol><li>更新系统<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update -y</span><br></pre></td></tr></table></figure></li><li>安装Node.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nodejs</span><br></pre></td></tr></table></figure></li><li>安装Git<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></li><li>检查安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure></li><li>安装Nginx<br>Nginx安装可以通过宝塔安装，或者自行百度。 </li><li>创建新的git用户并给其权限<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ adduser git#创建一个用户git</span><br><span class="line">$ sudo passwd git#设置git用户密码</span><br><span class="line"></span><br><span class="line">输入密码，密码太简单会给警告。</span><br><span class="line"></span><br><span class="line">$ chmod 740 &#x2F;etc&#x2F;sudoers#修改文件权限为用户可读写执行</span><br><span class="line">$ vim &#x2F;etc&#x2F;sudoers#编辑文件</span><br><span class="line"></span><br><span class="line">按 i 键进入编辑模式</span><br><span class="line">找到这里 “root  ALL&#x3D;(ALL)   ALL”</span><br><span class="line">在下面输入 “git   ALL&#x3D;(ALL)   ALL”</span><br><span class="line">按esc进入视图模式，再输入 :wq 保存退出</span><br><span class="line"></span><br><span class="line">$ chmod 400 &#x2F;etc&#x2F;sudoers  &#x2F;&#x2F;改回权限</span><br></pre></td></tr></table></figure></li><li>创建密钥文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ su git</span><br><span class="line">$ mkdir ~&#x2F;.ssh</span><br><span class="line">$ vim ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"></span><br><span class="line"># 把之前复制的 id_rsa.pub 文件粘贴到这</span><br><span class="line"></span><br><span class="line">$ chmod 600 &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">$ chmod 700 &#x2F;home&#x2F;git&#x2F;.ssh</span><br></pre></td></tr></table></figure></li><li>测试 ssh 连接<br>本地打开cmd窗口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@服务器ip</span><br></pre></td></tr></table></figure>输入密码后显示类似 Welcome to Alibaba Cloud Elastic Compute Service ! （我是阿里云服务器）的语句就说明你链接成功了。</li><li>创建网站的根目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">mkdir &#x2F;home&#x2F;hexo    # 此目录为网站的根目录</span><br><span class="line">chown git:git -R &#x2F;home&#x2F;hexo</span><br></pre></td></tr></table></figure></li><li>配置 Nginx<br>我是直接使用了宝塔创建站点，比较方便<br>如果要自己手动配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>配置文件样例:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80; # 监听的端口，默认是80</span><br><span class="line">    server_name _; # 你的域名，没有的话可以随便填，然后用端口访问;</span><br><span class="line">    index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    root &#x2F;home&#x2F;hexo; # 网站根目录</span><br><span class="line"></span><br><span class="line">    # 下面的无所谓，可以只写一个location &#x2F; &#123;&#125;</span><br><span class="line">    location ~ ^&#x2F;(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span><br><span class="line">    &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">    &#123;</span><br><span class="line">        expires      30d;</span><br><span class="line">        error_log &#x2F;dev&#x2F;null;</span><br><span class="line">        access_log &#x2F;dev&#x2F;null;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ~ .*\.(js|css)?$</span><br><span class="line">    &#123;</span><br><span class="line">        expires      12h;</span><br><span class="line">        error_log &#x2F;dev&#x2F;null;</span><br><span class="line">        access_log &#x2F;dev&#x2F;null; </span><br><span class="line">    &#125;</span><br><span class="line">    access_log  &#x2F;www&#x2F;wwwlogs&#x2F;47.105.106.249.log;</span><br><span class="line">    error_log  &#x2F;www&#x2F;wwwlogs&#x2F;47.105.106.249.error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>建立 git 裸库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">cd &#x2F;home&#x2F;git   # 在 git 用户目录下创建</span><br><span class="line">git init --bare hexo.git</span><br><span class="line">chown git:git -R hexo.git</span><br></pre></td></tr></table></figure></li><li>使用 git-hooks 同步网站根目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hexo.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>填入以下内容，如果根目录和仓库目录和我设的不一样就自己改一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">git --work-tree&#x3D;&#x2F;home&#x2F;hexo --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;hexo.git checkout -f</span><br></pre></td></tr></table></figure>完成后赋予权限<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chown -R git:git &#x2F;home&#x2F;git&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive</span><br><span class="line">$ chmod +x &#x2F;home&#x2F;git&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure></li><li>配置本地 Hexo 站点文件并部署<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@SERVER:&#x2F;home&#x2F;git&#x2F;hexo.git     # 填写你的服务器地址 将SERVER替换掉</span><br><span class="line">    branch: master      # 分支</span><br></pre></td></tr></table></figure>之后 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d。<br>打开刚刚设置的站点，部署成功。</li></ol><h2 id="各种问题"><a href="#各种问题" class="headerlink" title="各种问题"></a>各种问题</h2><ol><li>[emerg] getpwnam(“www”) failed</li></ol><ul><li>信息：Nginx的错误日志中给出如下信息：[emerg] 65814#0: getpwnam(“www”) failed</li><li>原因：没有创建www这个用户</li><li>解决：创建组和用户<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;sbin&#x2F;groupadd -f www</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;useradd -g www www</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>existing lock file /etc/subgid.lock without a PID</li></ol><ul><li>信息：useradd git -g git 后显示 useradd: existing lock file /etc/subgid.lock without a PID（也会有类似的文件）</li><li>原因：这个文件</li><li>解决：删除即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf &#x2F;etc&#x2F;subgid.lock </span><br><span class="line">useradd git -g git</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>Host key verification failed.</li></ol><ul><li>信息：ssh -v git@服务器ip 后显示  WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</li><li>原因：重置过服务器</li><li>解决：ssh-keygen -R IP地址</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://blog.csdn.net/weixin_41154636/article/details/99685965">hexo部署云服务器的全过程</a></li><li><a href="https://blog.csdn.net/u012383839/article/details/72875210">Nginx错误：[emerg] getpwnam(“www”) failed</a></li><li><a href="https://blog.csdn.net/weixin_34362790/article/details/93690469">linux下增加useradd提示existing lock file /etc/subgid.lock without a PID</a></li><li><a href="https://blog.csdn.net/wd2014610/article/details/85639741">解决Host key verification failed.(亲测有效)</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;服务器：阿里云轻量级服务器、centos7.3、1核、2G内存&lt;/li&gt;
&lt;li&gt;hexo博客：Next主题，已经完成本地调试</summary>
    
    
    
    <category term="服务器" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>centOS7服务器防火墙</title>
    <link href="http://example.com/wiki/centOS7%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <id>http://example.com/wiki/centOS7%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99/</id>
    <published>2021-03-30T12:48:59.000Z</published>
    <updated>2021-03-30T12:52:17.149Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>查看防火墙状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>running 状态即防火墙已经开启<br>dead 状态即防火墙未开启</p><span id="more"></span></li><li><p>开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure></li><li><p>查看端口是否已开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --query-port&#x3D;8888&#x2F;tcp</span><br></pre></td></tr></table></figure><p>提示yes表示已开通，提示no表示未开通。</p></li><li><p>开放端口号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port&#x3D;8888&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure><p>提示success表示成功。</p></li><li><p>开放一个范围的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port&#x3D;8000-9999&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure></li><li><p>重新载入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>关闭端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --remove-port&#x3D;8888&#x2F;tcp</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看防火墙状态&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl status firewalld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;running 状态即防火墙已经开启&lt;br&gt;dead 状态即防火墙未开启&lt;/p&gt;</summary>
    
    
    
    <category term="服务器" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="防火墙" scheme="http://example.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>jetbrain学生认证</title>
    <link href="http://example.com/wiki/jetbrain%E5%AD%A6%E7%94%9F%E8%AE%A4%E8%AF%81/"/>
    <id>http://example.com/wiki/jetbrain%E5%AD%A6%E7%94%9F%E8%AE%A4%E8%AF%81/</id>
    <published>2021-03-29T08:47:26.000Z</published>
    <updated>2021-04-07T08:39:30.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JetBrain学生认证方法"><a href="#JetBrain学生认证方法" class="headerlink" title="JetBrain学生认证方法"></a>JetBrain学生认证方法</h2><p>注：该方法有效期一年，过期须重新认证。</p><ul><li><p>进入 <a href="https://www.jetbrains.com/community/education/#students">学生免费申请界面</a></p></li><li><p>完成注册和登录</p></li><li><p>点击 Apply now ，进入学生认证。</p></li><li><p><img src="https://p9-tt.byteimg.com/origin/pgc-image/7b3bd75297e24175a77814a10ffd2713.png" alt="snipaste_2021-04-07_16-15-45.png"></p><span id="more"></span></li><li><p>因为白嫖党太多了，现在没法用学生邮箱认证，只能用官方文件</p></li><li><p>填写信息<br>官方文件建议用学生证，里面的信息拍清楚。<br>参考：<br><img src="https://p26-tt.byteimg.com/origin/pgc-image/839eddb7437c43a6ba073d609a4a8372.png" alt="snipaste_2021-04-07_16-15-46.png"></p></li><li><p>点击 申请免费产品</p></li><li><p>提交成功<br><img src="https://p6-tt.byteimg.com/origin/pgc-image/1f0b3472a506447fb6357d67e07b1bec.png" alt="snipaste_2021-04-07_16-35-13.png"></p></li><li><p>等待一周左右，官方会给你发消息通知你申请成功</p></li><li><p>查看 <a href="https://account.jetbrains.com/licenses#">许可证</a></p></li><li><p>下载 Jet Brain 的软件，填写许可证即可免费使用</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;JetBrain学生认证方法&quot;&gt;&lt;a href=&quot;#JetBrain学生认证方法&quot; class=&quot;headerlink&quot; title=&quot;JetBrain学生认证方法&quot;&gt;&lt;/a&gt;JetBrain学生认证方法&lt;/h2&gt;&lt;p&gt;注：该方法有效期一年，过期须重新认证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;进入 &lt;a href=&quot;https://www.jetbrains.com/community/education/#students&quot;&gt;学生免费申请界面&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;完成注册和登录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击 Apply now ，进入学生认证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;https://p9-tt.byteimg.com/origin/pgc-image/7b3bd75297e24175a77814a10ffd2713.png&quot; alt=&quot;snipaste_2021-04-07_16-15-45.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="杂项" scheme="http://example.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>考研流程</title>
    <link href="http://example.com/wiki/%E8%80%83%E7%A0%94%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/wiki/%E8%80%83%E7%A0%94%E6%B5%81%E7%A8%8B/</id>
    <published>2021-03-29T07:19:25.000Z</published>
    <updated>2021-04-05T09:34:45.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总流程图"><a href="#总流程图" class="headerlink" title="总流程图"></a>总流程图</h2><div id="flowchart-0" class="flow-chart"></div><h2 id="初试"><a href="#初试" class="headerlink" title="初试"></a>初试</h2><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>12月最后一个周末。</p><p>周六 </p><ul><li>8:30 - 11:30 政治 </li><li>14:00 - 17:00 外语</li></ul><p>周日</p><ul><li>8:30 - 11:30 业务课1 </li><li>14:00 - 17:00 业务课2</li></ul><p>ps.考研不能提前离开考场</p><h3 id="科目"><a href="#科目" class="headerlink" title="科目"></a>科目</h3><ol><li>政治<br>满分100分，考研最简单的科目，因为考的很杂，而且有时事政治的内容，所有强烈建议报班跟着老师复习。<br>单选题 16*1’、多选题 17*2’、论述题 5*10’</li></ol><ol start="2"><li><p>外语</p></li><li><p>业务课1<br>以我们计算机专业为例，业务课1就是考数学。<br>数学分为数学一和数学二，其中数学一考高数、线代和概率论，数学二考高数、线代，并且数学一比数学二难一点。</p></li><li><p>业务课2</p></li></ol><p>##<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 决定考研e1=>end: 上岸e2=>end: 再战、就业...c1=>condition: 初试(十二月最后一个周末)c2=>condition: 调剂复试(四月份)c3=>condition: 复试(四月份)c4=>condition: 通过国家线op1=>operation: 网上预报名(十月份)op2=>operation: 正式报名和现场确认(十一月)op3=>operation: 联系调剂院校op4=>operation: 拟录取(六月份)op5=>operation: ...st->op1->op2->c1(yes)->c3(yes)->op5->op4->e1c1(no)->c4(no)->e2c4(yes)->op3->c2(yes)->op4c2(no)->e2c3(no)->op3</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;总流程图&quot;&gt;&lt;a href=&quot;#总流程图&quot; class=&quot;headerlink&quot; title=&quot;总流程图&quot;&gt;&lt;/a&gt;总流程图&lt;/h2&gt;&lt;div id=&quot;flowchart-0&quot; class=&quot;flow-chart&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;初试&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/"/>
    
    
  </entry>
  
  <entry>
    <title>spfa</title>
    <link href="http://example.com/wiki/spfa/"/>
    <id>http://example.com/wiki/spfa/</id>
    <published>2021-03-29T06:48:50.000Z</published>
    <updated>2021-03-29T08:38:28.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><span id="more"></span><h2 id="算法说明"><a href="#算法说明" class="headerlink" title="算法说明"></a>算法说明</h2><h3 id="无优化"><a href="#无优化" class="headerlink" title="无优化"></a>无优化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    vis[s] = <span class="number">1</span>;dis[s] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = ed[i].ne) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = ed[i].v, w = ed[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w) &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(v), vis[v] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (++tim[v] &gt; n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SLF优化-双端队列优化"><a href="#SLF优化-双端队列优化" class="headerlink" title="SLF优化(双端队列优化)"></a>SLF优化(双端队列优化)</h3><p>SLF:Small Label First<br>就是如果要加入队列的值比队列头要小， 就把他放在队列头。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st)</span></span>&#123;</span><br><span class="line">    vis[st] = <span class="number">1</span>; dis[st] = <span class="number">0</span>;</span><br><span class="line">    deque&lt;<span class="keyword">int</span>&gt;q; q.<span class="built_in">push_front</span>(st);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop_front</span>();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = ed[i].ne)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = ed[i].v, w = ed[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)&#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v])&#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 优化</span></span><br><span class="line">                    <span class="keyword">if</span> (dis[v] &lt;= q.<span class="built_in">front</span>()) q.<span class="built_in">push_front</span>(dis[v]);</span><br><span class="line">                    <span class="keyword">else</span> q.<span class="built_in">push_back</span>(dis[v]);</span><br><span class="line">                    <span class="keyword">if</span> (++tim[v] &gt; n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LLL优化"><a href="#LLL优化" class="headerlink" title="LLL优化"></a>LLL优化</h3><p>LLL: Large label last<br>和队列中的平均值比， 比平均值大就不更新放在队列后面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st)</span></span>&#123;</span><br><span class="line">    vis[st] = <span class="number">1</span>; dis[st] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt;q; q.<span class="built_in">push</span>(st);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, cnt_s = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (u * cnt_s &gt; sum)&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(u);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        sum -= dis[u], cnt_s--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = ed[i].ne)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = ed[i].v, w = ed[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)&#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(v), vis[v] = <span class="number">1</span>;</span><br><span class="line">                    sum += dis[v], cnt_s++;</span><br><span class="line">                    <span class="keyword">if</span> (++tim[v] &gt; n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SLF-LLL（Large-Label-Last）"><a href="#SLF-LLL（Large-Label-Last）" class="headerlink" title="SLF + LLL（Large Label Last）"></a>SLF + LLL（Large Label Last）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    dis[u] = <span class="number">0</span>;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push_back</span>(u);</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = dis[u];</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        u = q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">while</span>(num * dis[u] &gt; sum)&#123;</span><br><span class="line">            q.<span class="built_in">pop_front</span>();q.<span class="built_in">push_back</span>(u);</span><br><span class="line">            u = q.<span class="built_in">front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">pop_front</span>();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        tim[u]++;</span><br><span class="line">        <span class="keyword">if</span> (tim[u] &gt; <span class="built_in">sqrt</span>(n + m)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = ed[i].ne)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = ed[i].v, w = ed[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)&#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                <span class="keyword">if</span> (!q.<span class="built_in">empty</span>() &amp;&amp; dis[v] &gt; dis[q.<span class="built_in">front</span>()]) q.<span class="built_in">push_back</span>(v);</span><br><span class="line">                <span class="keyword">else</span> q.<span class="built_in">push_front</span>(v);</span><br><span class="line">                vis[v] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非连通块找负环"><a href="#非连通块找负环" class="headerlink" title="非连通块找负环"></a>非连通块找负环</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ss=n+<span class="number">1</span>;<span class="comment">//找一个超级边，与其他边的距离为1，寻找一遍spfa(ss)找有没有非连通块的负权</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="built_in">addedge</span>(ss,i,<span class="number">0</span>);<span class="comment">// 注意 要是有向图 就得是这个顺序才行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">spfa</span>(ss))&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init</span>();<span class="comment">//注意在初始化一遍</span></span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;算法介绍&quot;&gt;&lt;a href=&quot;#算法介绍&quot; class=&quot;headerlink&quot; title=&quot;算法介绍&quot;&gt;&lt;/a&gt;算法介绍&lt;/h2&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="图论" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="最短路" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Dijkstra</title>
    <link href="http://example.com/wiki/Dijkstra/"/>
    <id>http://example.com/wiki/Dijkstra/</id>
    <published>2021-03-29T05:49:16.000Z</published>
    <updated>2021-03-29T08:38:32.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><span id="more"></span><h2 id="算法说明"><a href="#算法说明" class="headerlink" title="算法说明"></a>算法说明</h2><h3 id="普通-n-2-版"><a href="#普通-n-2-版" class="headerlink" title="普通$n^2$版"></a>普通$n^2$版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        dis[i] = <span class="built_in">min</span>(dis[i], ma[s][i]);<span class="comment">//先给点1初始化距离</span></span><br><span class="line">    <span class="keyword">int</span> index;   <span class="comment">//记录最短距离的下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123; <span class="comment">//找剩下的n-1 个点</span></span><br><span class="line">        <span class="keyword">int</span> minn = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; minn &gt; dis[j]) &#123;</span><br><span class="line">                minn = dis[j];</span><br><span class="line">                index = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[index] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            dis[j] = <span class="built_in">min</span>(dis[j], ma[index][j] + minn);<span class="comment">// 再根据minn更新dis</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优先队列优化"><a href="#优先队列优化" class="headerlink" title="优先队列优化"></a>优先队列优化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; q;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">P</span>(<span class="number">0</span>, s));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">top</span>().second; q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = ed[i].ne) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = ed[i].v, w = ed[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class="line">                dis[v] = dis[u] + w, q.<span class="built_in">push</span>(<span class="built_in">P</span>(dis[v], v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;算法介绍&quot;&gt;&lt;a href=&quot;#算法介绍&quot; class=&quot;headerlink&quot; title=&quot;算法介绍&quot;&gt;&lt;/a&gt;算法介绍&lt;/h2&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="图论" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="最短路" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
  </entry>
  
</feed>
