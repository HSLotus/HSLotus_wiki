<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HsLotus的知识wiki</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-06T10:22:59.293Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>HsLotus</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E7%90%86%E8%AE%BA%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E7%90%86%E8%AE%BA%E6%A6%82%E5%BF%B5/</id>
    <published>2022-08-20T05:13:45.621Z</published>
    <updated>2022-04-06T10:22:59.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库概论理论概念"><a href="#数据库概论理论概念" class="headerlink" title="数据库概论理论概念"></a>数据库概论理论概念</h1><ul><li><p>关系模型的基本概念和基本术语共有十三个，它们分别是：</p><ol><li>关系(Relation)：一个关系对应着一个二维表，二维表就是关系名。</li><li>元组(Tuple)：在二维表中的一行，称为一个元组。</li><li>属性(Attribute)：在二维表中的列，称为属性。属性的个数称为关系的元或度。列的值称为属性值；</li><li>（值）域(Domain)：属性值的取值范围为值域。</li><li>分量：每一行对应的列的属性值，即元组中的一个属性值</li><li>关系模式：在二维表中的行定义，即对关系的描述称为关系模式。一般表示为（属性1，属性2，……,属性n），如老师的关系模型可以表示为教师（教师号，姓名，性别，年龄，职称，所在系）。</li><li>键(码)：如果在一个关系中存在唯一标识一个实体的一个属性或属性集称为实体的键，即使得在该关系的任何一个关系状态中的两个元组，在该属性上的值的组合都不同。</li><li>候选键(候选码)：若关系中的某一属性的值能唯一标识一个元组如果在关系的一个键中不能移去任何一个属性，否则它就不是这个关系的键，则称这个被指定的候选键为该关系的候选键或者候选码。</li><li>主键（主码）：在一个关系的若干候选键中指定一个用来唯一标识该关系的元组，则称这个被指定的候选键称为主关键字，或简称为主键、关键字、主码。每一个关系都有并且只有一主键，通常用较小的属性组合作为主键。例如学生表，选定“学号”作为数据操作的依据，则“学号”为主键。而在选课表中，主键为（学号，课程号）。</li><li>主属性和非主属性：关系中包含在任何一个候选键中的属性称为主属性，不包含在任何一个候选键中的属性为非主属性。</li><li>全键或者全码：一个关系模式中的所有属性的集合。</li><li>外键或者外码：关系中的某个属性虽然不是这个关系的主键，或者只是主键的，但它却是另外一个关系的主键时，则称之为外键或者外码。</li><li>超键或者超码：如果在关系的一个键中移去某个属性，它仍然是这个关系的键，则称这样的键为关系的超键或者超码。</li><li>参照关系与被参照关系：是指以外键相互联系的两个关系，可以相互转化。</li></ol></li><li><p>数据库恢复技术要求有一定的冗余度。另外如果数据库操作不当，也会产生冗余数据。因此数据库不能在绝对意义上避免了数据重复。</p></li><li><p>数据库更新时的一致性，指数据库中的数据开始是正确的，随着状态转移，总是保持正确的状态，用户在任意时刻的任何请求返回的都是正确的结果。数据库以一定的模式存储数据，本质是对真实世界建模，因此这里的正确是指，数据满足真实世界各种约束（例如：完整性约束）。如果系统是完全可以控制的，就可以很容易实现更新时的一致性。</p></li><li><p>共享是指多用户、多种应用、多种语言互相覆盖地共享数据集合，所有用户可同时存取数据库中的数据。数据库是面向整个系统的，以最优的方式服务于一个或多个应用程序(用户)，实现数据共享。</p></li><li><p>数据库共享性高，是从全局分析和描述数据，就可以适合多个用户、各种应用共享数据的需求。信息可在统一的地方存储，共享的同时可显著减少数据冗余，节省存储空间。但是，并不是说完全没有冗余，只是相对冗余度降低而已。</p></li><li><p>数据库系统的特点：</p><ol><li>数据结构化</li><li>数据共享性高，冗余度低且易扩展</li><li>数据独立性高</li><li>数据由数据库管理系统统一管理个控制</li></ol></li><li><p>数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作。 事务处理可以确保除非事务性单元内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的单元，可以简化错误恢复并使应用程序更加可靠。一个逻辑工作单元要成为事务，必须满足所谓的ACID(原子性、一致性、隔离性和持久性)属性。</p></li><li><p>数据库完整性是指数据库中数据在逻辑上的一致性、正确性、有效性和相容性。数据库完整性由各种各样的完整性约束来保证，因此可以说数据库完整性设计就是数据库完整性约束的设计。数据库完整性约束可以通过DBMS或应用程序来实现，基于DBMS的完整性约束作为模式的一部分存入数据库中。通过DBMS实现的数据库完整性按照数据库设计步骤进行设计，而由应用软件实现的数据库完整性则纳入应用软件设计</p><p>  可以分为：</p><ol><li>实体完整性:保证关系中的每个元组都是可识别的和唯一的,指关系数据库中所有的表都必须有主键,而且表中不允许存在如下记录:无主键值的记录，主键值相同的记录</li><li>参照完整性:也称为引用完整性，现实世界中的实体之间往往存在着某种联系,在关系模型中，实体以及实体之间的联系都是用关系来表示的,这样就自然存在着关系与关系之间的引用，参照完整性就是描述实体之间的联系的，参照完整性一般是指多个实体或关系之间的关联关系; </li><li>用户定义完整性约束:是指根据应用环境的要求和实际的需要,对某一具体应用所涉及的数据提出约束性条件。这一约束机制一般不应由应用程序提供，而应有由关系模型提供定义并检验，主要包括字段有效性约束和记录有效性。实际上就是指明关系中属性的取值范围，防止属性的值与应用语义矛盾</li></ol></li><li><p>主键是一种约束，唯一索引是一种索引，两者在本质上是不同的。</p><p>   主键创建后一定包含一个唯一性索引，唯一性索引并不一定就是主键。 唯一性索引列允许空值，而主键列不允许为空值。 主键列在创建时，已经默认为空值 + 唯一索引了。 主键可以被其他表引用为外键，而唯一索引不能。 一个表最多只能创建一个主键，但可以创建多个唯一索引。 主键更适合那些不容易更改的唯一标识，如自动递增列、身份证号等。 在 RBO 模式下，主键的执行计划优先级要高于唯一索引。 两者可以提高查询的速度。</p></li><li><p>全外连接：任意一边有值就会显示。</p><p>  内连接：只返回满足连接条件的数据（两边都有的才显示）。对应等值连接。</p><p>  左外连接：只要左边有值就会显示。</p><p>  右外连接：只要右边有值就会显示。</p></li><li><p><strong>数据库事务的并发控制问题：</strong><br>  <strong>丢失修改：</strong>两个不同的事务同时获得了相同的数据,又都对这个数据进行了修改,那么先提交的事务的更新就会被后提交事务的更新覆盖掉.<br>  <strong>脏读（未提交读) ：</strong>一个事务正在访问数据，而其他事务正在更新该数据，但尚未提交，此时会发生脏读问题，即第一个事务所读取的数据是“脏”的。<br>  <strong>不可重复读：</strong>在一个事务内多次读同一数据，在该事务还没有结束时，另外的事务也访问该数据并对其做修改，从而导致第一个事务两次读取的数据不一样。<br>  <strong>幻读：有两种情况</strong><br>   (1):事务T1按一定条件从数据库中读取了某些数据记录后,事务T2删除了其中部分记录,当T1再次按照相同条件读取数据时,发现某些记录神秘的消失了.<br>   (2):事务T1按一定条件从数据库中读取了某些数据记录后,事务T2插入了一些记录,当T1再次按照相同条件读取数据时,发现多了一些记录.</p></li><li><p><strong>数据库利用加锁和阻塞来保证事物之间不同等级的隔离性,从而实现事务的互不干扰的访问和操作数据库.</strong></p><p>  <strong>四级隔离级别：</strong>定义用户之间隔离和交互的程度<br>  **读未提交(read uncommitted)**：可以读到其他事务还没有提交的数据，但不允许丢失修改，会导致大量数据变化。一级封锁协议<br>  **读已提交(read committed)**：可以看到其他事务添加的新纪录，而且其他事务对现存记录做出的修改一旦被提交，也可以看到，避免丢失修改和脏读。二级封锁协议<br>  **可重复读(repeatable read)**：当前在执行的事务的变化无法被看到，同一事务中执行select数次结果都相同，避免丢失修改、脏读和不可重复读。增强的二级封锁协议<br>  **可串行化(serializable)**：提供严格的事务隔离。它要求事务序列化执行，事务只能一个接着一个地执行，不能并发执行，避免所有并发控制问题。三级封锁协议</p><p>  <img src="https://hslotus-bucket.oss-cn-shanghai.aliyuncs.com/img/20220406172849.png"></p></li><li><p>事务故障是由于程序执行错误而引起事务非预期的、异常终止的故障；</p><p>  系统故障是指系统在运行过程中，由于某种原因，造成系统停止运行，以致事务在执行过程中以非正常的方式终止，致使内存中的信息丢失，而存储在外存上的数据未受影响；</p><p>  介质故障是指外存储设备故障，主要有磁盘损坏，磁头碰撞盘面，突然的强磁场干扰，数据传输部件出错，磁盘控制器出错等</p></li><li><ol><li><p>数据依赖</p><p>   数据依赖指的是通过一个关系中属性间的相等与否体现出来的数据间的相互关系，其中最重要的是函数依赖和多值依赖。</p></li><li><p>函数依赖</p><p> 设X,Y是关系R的两个属性集合，当任何时刻R中的任意两个元组中的X属性值相同时，则它们的Y属性值也相同，则称X函数决定Y，或Y函数依赖于X。</p></li><li><p>平凡函数依赖当关系中属性集合Y是属性集合X的子集时(Y?X)，存在函数依赖X→Y，即一组属性函数决定它的所有子集，这种函数依赖称为平凡函数依赖。</p></li><li><p>非平凡函数依赖</p><p> 当关系中属性集合Y不是属性集合X的子集时，存在函数依赖X→Y，则称这种函数依赖为非平凡函数依赖。</p></li><li><p>完全函数依赖</p><p> 设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。</p></li><li><p>部分函数依赖</p><p> 设X,Y是关系R的两个属性集合，存在X→Y，若X’是X的真子集，存在X’→Y，则称Y部分函数依赖于X。</p></li><li><p>传递函数依赖</p><p> 设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z，则称Z传递函数依赖于X。</p></li><li><p>函数依赖</p><p> 设R(U)是一个属性集U上的关系模式，X和Y是U的子集。 </p></li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库概论理论概念&quot;&gt;&lt;a href=&quot;#数据库概论理论概念&quot; class=&quot;headerlink&quot; title=&quot;数据库概论理论概念&quot;&gt;&lt;/a&gt;数据库概论理论概念&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;关系模型的基本概念和基本术语共有十三个，它们分别是：&lt;/p&gt;
&lt;o</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93-sql/"/>
    <id>http://example.com/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93-sql/</id>
    <published>2022-08-20T05:13:45.618Z</published>
    <updated>2022-04-06T10:08:15.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h1><h2 id="关系代数基础运算符号"><a href="#关系代数基础运算符号" class="headerlink" title="关系代数基础运算符号"></a>关系代数基础运算符号</h2><p>关系代数有五个基础运算符，这五个基础运算符能派生出其他组合运算符。它们分别是：</p><p>选择（σ， selection）、投影（π， projection）、叉乘（x， cross-product）、</p><p>差（-, set-difference）和并（υ, union）</p><p>它们和SQL语句的对应关系为：</p><ul><li><p>选择（σ， selection）相当于SQL语句中的where，表示选出满足一定条件的行。如：σ rating&gt;8 (S2）相当于 select * from S2 where rating&gt;8;</p></li><li><p>投影（π， projection）相当于SQL语句中的 select…distinct， 表示选择哪些列。注意：投影是会去重的！如：π sname,rating (σ rating&gt;8 (S2）)相当于 select sname, rating from S2 where rating&gt;8;</p></li><li><p>叉乘（x， cross-product）相当于SQL语句中的from，表示穷举所有集合两边元素的组合量。如: AxB 相当于 select * from A, B;  注意：叉乘时两个集合不能有重名列</p></li><li><p>差（-, set-difference）R-S返回所有在R中而不在S中的元组</p></li><li><p>并（υ, union）RυS返回包含在R中或在S中的所有元组</p></li></ul><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ol><li><p>ORDER BY 排序</p><p> DESC 升序</p><p> ASC 降序</p></li><li><p>DISTINCT 用于返回唯一不同的值</p></li><li><p>UNION 用于合并两个或多个 SELECT 语句的结果集。如果允许重复的值，请使用 UNION ALL。</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> (<span class="keyword">ALL</span>)</span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure></li><li><p>GROUP BY 用于结合聚合函数，根据一个或多个列对结果集进行分组。</p><p> 通常和集合函数SUM(),AVG().MAX(),MIN(),COUNT()等结合在一起，后接限制条件语句 having,不可用where语句！</p></li><li><p>ALTER 用于在已有的表中添加、删除或修改列。</p><ul><li>ADD COLUMN &lt;列名&gt; &lt;类型&gt; 添加一个列</li><li>CHANGE COLUMN &lt;旧列名&gt; &lt;新列名&gt; &lt;新列类型&gt; 用来修改字段名字以及类型</li><li>ALTER COLUMN &lt;列名&gt; { SET DEFAULT &lt;默认值&gt; | DROP DEFAULT } 用来修改字段数据</li><li>MODIFY COLUMN &lt;列名&gt; &lt;类型&gt; 用来修改字段类型</li><li>DROP COLUMN &lt;列名&gt;  删除一个列</li><li>RENAME TO &lt;新表名&gt;  重命名一个列</li></ul></li><li><p>GRANT 授予权限</p><p> GRANT UPDATE &lt;列名&gt; on &lt;表名&gt; to 用户</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sql&quot;&gt;&lt;a href=&quot;#sql&quot; class=&quot;headerlink&quot; title=&quot;sql&quot;&gt;&lt;/a&gt;sql&lt;/h1&gt;&lt;h2 id=&quot;关系代数基础运算符号&quot;&gt;&lt;a href=&quot;#关系代数基础运算符号&quot; class=&quot;headerlink&quot; title=&quot;关</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/wiki/python%E7%88%AC%E8%99%AB/"/>
    <id>http://example.com/wiki/python%E7%88%AC%E8%99%AB/</id>
    <published>2022-08-20T05:13:45.610Z</published>
    <updated>2021-05-01T06:12:57.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在python实现的网络爬虫中，用于网络请求发送的模块有两种，第一种为urllib模块，第二种为requests模块。urllib模块是一种比较古老的模块，在使用的过程中较为繁琐和不便。当requests模块出现后，就快速的代替了urllib模块。</p><h3 id="使用方法：（requests编码流程）"><a href="#使用方法：（requests编码流程）" class="headerlink" title="使用方法：（requests编码流程）"></a>使用方法：（requests编码流程）</h3><ol><li>指定url</li><li>发起请求</li><li>获取响应数据</li><li>持久化存储</li></ol><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="爬取搜狗主页源码（requests入门）"><a href="#爬取搜狗主页源码（requests入门）" class="headerlink" title="爬取搜狗主页源码（requests入门）"></a>爬取搜狗主页源码（requests入门）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#step_1:指定url</span></span><br><span class="line">url = <span class="string">&#x27;https://www.sogou.com/&#x27;</span></span><br><span class="line"><span class="comment">#step_2:发起请求:使用get方法发起get请求，该方法会返回一个响应对象。参数url表示请求对应的url</span></span><br><span class="line">response = requests.get(url=url)</span><br><span class="line"><span class="comment">#step_3:获取响应数据:通过调用响应对象的text属性，返回响应对象中存储的字符串形式的响应数据（页面源码数据）</span></span><br><span class="line">page_text = response.text</span><br><span class="line"><span class="comment">#step_4:持久化存储</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./sogou.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(page_text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;爬取数据完毕！！！&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="爬取搜狗指定词条对应的搜索结果页面（requests的get请求、UA伪装）"><a href="#爬取搜狗指定词条对应的搜索结果页面（requests的get请求、UA伪装）" class="headerlink" title="爬取搜狗指定词条对应的搜索结果页面（requests的get请求、UA伪装）"></a>爬取搜狗指定词条对应的搜索结果页面（requests的get请求、UA伪装）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#指定搜索关键字</span></span><br><span class="line">word = <span class="built_in">input</span>(<span class="string">&#x27;enter a word you want to search:&#x27;</span>)</span><br><span class="line"><span class="comment">#自定义请求头信息:UA伪装,将包含了User-Agent的字典作用到请求方法的headers参数中即可</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#指定url，原始url可能是https://www.sogou.com/web?query=撩妹，发现该url携带了参数</span></span><br><span class="line">url = <span class="string">&#x27;https://www.sogou.com/web&#x27;</span></span><br><span class="line"><span class="comment">#封装get请求参数：如果请求携带了参数，则可以将参数封装到字典中结合这requests请求方法中的data/params参数进行url参数的处理</span></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&#x27;query&#x27;</span>:word,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#发起请求</span></span><br><span class="line">response = requests.get(url=url,params=param,headers=headers)</span><br><span class="line"><span class="comment">#获取响应数据</span></span><br><span class="line">page_text = response.text</span><br><span class="line"><span class="comment">#持久化存储</span></span><br><span class="line">fileName = word+<span class="string">&#x27;.html&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(fileName,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(page_text)</span><br></pre></td></tr></table></figure><h4 id="爬取百度翻译（requests模块的post请求、json）"><a href="#爬取百度翻译（requests模块的post请求、json）" class="headerlink" title="爬取百度翻译（requests模块的post请求、json）"></a>爬取百度翻译（requests模块的post请求、json）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">word = <span class="built_in">input</span>(<span class="string">&#x27;enter a English word:&#x27;</span>)</span><br><span class="line"><span class="comment">#自定义请求头信息:UA伪装,将包含了User-Agent的字典作用到请求方法的headers参数中即可</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#指定url，原始url可能是https://www.sogou.com/web?query=撩妹，发现该url携带了参数</span></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"><span class="comment">#封装post请求参数：如果请求携带了参数，则可以将参数封装到字典中结合这requests请求方法中的data/params参数进行url参数的处理</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>:word,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#发起请求</span></span><br><span class="line">response = requests.post(url=url,data=data,headers=headers)</span><br><span class="line"><span class="comment">#获取响应数据:如果响应回来的数据为json，则可以直接调用响应对象的json方法获取json对象数据</span></span><br><span class="line">json_data = response.json()</span><br><span class="line"><span class="comment">#持久化存储</span></span><br><span class="line">fileName = word+<span class="string">&#x27;.json&#x27;</span></span><br><span class="line">fp = <span class="built_in">open</span>(fileName,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">json.dump(json_data,fp,ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;requests模块&quot;&gt;&lt;a href=&quot;#requests模块&quot; class=&quot;headerlink&quot; title=&quot;requests模块&quot;&gt;&lt;/a&gt;requests模块&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>批处理入门</title>
    <link href="http://example.com/wiki/%E6%89%B9%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/wiki/%E6%89%B9%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8/</id>
    <published>2021-04-25T05:20:55.000Z</published>
    <updated>2021-04-25T11:36:13.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="批处理简介"><a href="#批处理简介" class="headerlink" title="批处理简介"></a>批处理简介</h2><p>批处理文件是指文件后缀名为 “.bat”，“.cmd” 的文件，它的作用是可以一次批量执行大量的 DOS 命令，可以大大节省命令反复输入的繁琐。</p><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>回显控制命令</p><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>@</td><td>关闭单行回显</td></tr><tr><td>echo off</td><td>从下一行开始关闭回显</td></tr><tr><td>@echo off</td><td>从本行开始关闭回显。一般批处理第一行都是这个</td></tr><tr><td>echo on</td><td>从下一行开始打开回显</td></tr><tr><td>echo</td><td>显示当前是 echo off 状态还是 echo on 状态</td></tr><tr><td>echo.</td><td>输出一个”回车换行”，一般就是指空白行</td></tr><tr><td>echo %errorlevel%</td><td>每个命令运行结束，可以用这个命令行格式查看返回码用于判断刚才的命令是否执行成功。成功默认值为0。</td></tr></tbody></table><span id="more"></span><h3 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h3><p>显示目录中的文件和子目录列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DIR [drive:][path][filename] [&#x2F;A[[:]attributes]] [&#x2F;B] [&#x2F;C] [&#x2F;D] [&#x2F;L] [&#x2F;N] [&#x2F;O\[[:]sortorder]] [&#x2F;P] [&#x2F;Q] [&#x2F;R] [&#x2F;S] [&#x2F;T[[:]timefield]] [&#x2F;W] [&#x2F;X] [&#x2F;4]</span><br></pre></td></tr></table></figure><h4 id="A"><a href="#A" class="headerlink" title="/A"></a>/A</h4><p>显示具有指定属性的文件。</p><ol><li>D  目录                </li><li>R  只读文件</li><li>H  隐藏文件</li><li>A  准备存档的文件</li><li>S  系统文件</li><li>I  无内容索引文件</li><li>L  重新分析点</li><li>O  脱机文件</li><li>-  表示“否”的前缀<h4 id="B"><a href="#B" class="headerlink" title="/B"></a>/B</h4>使用空格式(没有标题信息或摘要)。<h4 id="C"><a href="#C" class="headerlink" title="/C"></a>/C</h4>在文件大小中显示千位数分隔符。这是默认值。用 /-C 来禁用分隔符显示。<h4 id="D"><a href="#D" class="headerlink" title="/D"></a>/D</h4>跟宽式相同，但文件是按栏分类列出的。<h4 id="L"><a href="#L" class="headerlink" title="/L"></a>/L</h4>用小写。<h4 id="N"><a href="#N" class="headerlink" title="/N"></a>/N</h4>新的长列表格式，其中文件名在最右边。<h4 id="O"><a href="#O" class="headerlink" title="/O"></a>/O</h4>用分类顺序列出文件。</li><li>N  按名称(字母顺序)     </li><li>S  按大小(从小到大)</li><li>E  按扩展名(字母顺序)</li><li>D  按日期/时间(从先到后)</li><li>G  组目录优先</li><li>-  反转顺序的前缀<h4 id="P"><a href="#P" class="headerlink" title="/P"></a>/P</h4>在每个信息屏幕后暂停。<h4 id="Q"><a href="#Q" class="headerlink" title="/Q"></a>/Q</h4>显示文件所有者。<h4 id="R"><a href="#R" class="headerlink" title="/R"></a>/R</h4>显示文件的备用数据流。<h4 id="S"><a href="#S" class="headerlink" title="/S"></a>/S</h4>显示指定目录和所有子目录中的文件。<h4 id="T"><a href="#T" class="headerlink" title="/T"></a>/T</h4>控制显示或用来分类的时间字符域</li><li>C  创建时间</li><li>A  上次访问时间</li><li>W  上次写入的时间<h4 id="W"><a href="#W" class="headerlink" title="/W"></a>/W</h4>用宽列表格式。<h4 id="X"><a href="#X" class="headerlink" title="/X"></a>/X</h4>显示为非 8dot3 文件名产生的短名称。格式是 /N 的格式，短名称插在长名称前面。如果没有短名称，在其位置则显示空白。<h4 id="4"><a href="#4" class="headerlink" title="/4"></a>/4</h4>以四位数字显示年份</li></ol><h3 id="chdir-简写cd"><a href="#chdir-简写cd" class="headerlink" title="chdir(简写cd)"></a>chdir(简写cd)</h3><p>更改当前目录，文件名带空格，路径前需要加上引号！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CD [&#x2F;D] [drive:][path]</span><br></pre></td></tr></table></figure><h4 id="d"><a href="#d" class="headerlink" title="/d"></a>/d</h4><p>除了改变驱动器的当前目录之外，还可改变当前驱动器。</p><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>cd mp3</td><td>进入当前目录中的 mp3 目录</td></tr><tr><td>cd ..</td><td>进入当前目录中的上级目录</td></tr><tr><td>cd\</td><td>进入根目录</td></tr><tr><td>cd</td><td>显示当前目录</td></tr><tr><td>cd /d d:\mp3</td><td>可以同时更改盘符和目录</td></tr></tbody></table><h3 id="mkdir-简写md"><a href="#mkdir-简写md" class="headerlink" title="mkdir(简写md)"></a>mkdir(简写md)</h3><p>创建目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MD [drive:]path</span><br></pre></td></tr></table></figure><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>md abc</td><td>在当前目录里建立子目录 abc</td></tr><tr><td>md d:\a\b\c</td><td>如果 d:\a 不存在，将会自动创建</td></tr></tbody></table><h3 id="rmdir-简写rd"><a href="#rmdir-简写rd" class="headerlink" title="rmdir(简写rd)"></a>rmdir(简写rd)</h3><p>删除一个目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RD [&#x2F;S] [&#x2F;Q] [drive:]path</span><br></pre></td></tr></table></figure><h4 id="S-1"><a href="#S-1" class="headerlink" title="/S"></a>/S</h4><p>除目录本身外，还将删除指定目录下的所有子目录和文件。用于删除目录树。</p><h4 id="Q-1"><a href="#Q-1" class="headerlink" title="/Q"></a>/Q</h4><p>安静模式，带 /S 删除目录树时不要求确认</p><h3 id="del-同erase"><a href="#del-同erase" class="headerlink" title="del(同erase)"></a>del(同erase)</h3><p>删除文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEL [&#x2F;P] [&#x2F;F] [&#x2F;S] [&#x2F;Q] [&#x2F;A[[:]attributes]] names</span><br></pre></td></tr></table></figure><h4 id="P-1"><a href="#P-1" class="headerlink" title="/P"></a>/P</h4><p>删除每一个文件之前提示确认。</p><h4 id="F"><a href="#F" class="headerlink" title="/F"></a>/F</h4><p>强制删除只读文件。</p><h4 id="S-2"><a href="#S-2" class="headerlink" title="/S"></a>/S</h4><p>删除所有子目录中的指定的文件。</p><h4 id="Q-2"><a href="#Q-2" class="headerlink" title="/Q"></a>/Q</h4><p>安静模式。删除全局通配符时，不要求确认</p><h4 id="A-1"><a href="#A-1" class="headerlink" title="/A"></a>/A</h4><p>根据属性选择要删除的文件</p><ol><li>R  只读文件</li><li>S  系统文件</li><li>H  隐藏文件</li><li>A  准备存档的文件</li><li>I  无内容索引文件</li><li>L  重新分析点</li><li>O  脱机文件</li><li>-  表示“否”的前缀</li></ol><h3 id="rename-简写ren"><a href="#rename-简写ren" class="headerlink" title="rename(简写ren)"></a>rename(简写ren)</h3><p>文件重命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REN [drive:][path]filename1 filename2.</span><br></pre></td></tr></table></figure><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>ren 1.txt 2.bak</td><td>把 1.txt 更名为 2.bak</td></tr><tr><td>ren *.txt *.ini</td><td>把当前目录里所有.txt文件改成.ini文件</td></tr><tr><td>ren d:\temp tmp</td><td>支持对文件夹的重命名</td></tr></tbody></table><h3 id="cls"><a href="#cls" class="headerlink" title="cls"></a>cls</h3><p>清屏</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>显示文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TYPE [drive:][path]filename</span><br></pre></td></tr></table></figure><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>type *.txt</td><td>显示当前目录里所有.txt文件的内容</td></tr></tbody></table><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>拷贝文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY [&#x2F;D] [&#x2F;V] [&#x2F;N] [&#x2F;Y | &#x2F;-Y] [&#x2F;Z] [&#x2F;L] [&#x2F;A | &#x2F;B ] source [&#x2F;A | &#x2F;B] [+ source [&#x2F;A | &#x2F;B] [+ ...]] [destination [&#x2F;A | &#x2F;B]]</span><br></pre></td></tr></table></figure><h4 id="A-2"><a href="#A-2" class="headerlink" title="/A"></a>/A</h4><p>表示一个 ASCII 文本文件。</p><h4 id="B-1"><a href="#B-1" class="headerlink" title="/B"></a>/B</h4><p>表示一个二进位文件。</p><h4 id="D-1"><a href="#D-1" class="headerlink" title="/D"></a>/D</h4><p>允许解密要创建的目标文件</p><h4 id="V"><a href="#V" class="headerlink" title="/V"></a>/V</h4><p>验证新文件写入是否正确。</p><h4 id="N-1"><a href="#N-1" class="headerlink" title="/N"></a>/N</h4><p>复制带有非 8dot3 名称的文件时，尽可能使用短文件名。</p><h4 id="Y"><a href="#Y" class="headerlink" title="/Y"></a>/Y</h4><p>不使用确认是否要覆盖现有目标文件的提示。</p><h4 id="Y-1"><a href="#Y-1" class="headerlink" title="/-Y"></a>/-Y</h4><p>使用确认是否要覆盖现有目标文件的提示。</p><h4 id="Z"><a href="#Z" class="headerlink" title="/Z"></a>/Z</h4><p>用可重新启动模式复制已联网的文件。</p><h4 id="L-1"><a href="#L-1" class="headerlink" title="/L"></a>/L</h4><p>如果源是符号链接，请将链接复制到目标而不是源链接指向的实际文件。</p><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>copy c:\test.txt d:\</td><td>复制 c:\test.txt 文件到 d:</td></tr><tr><td>copy c:\test.txt d:\test.bak</td><td>复制 c:\test.txt 文件到 d:\ ，并重命名为 test.bak</td></tr><tr><td>copy c:*.*</td><td>复制 c:\ 所有文件到当前目录，不包括隐藏文件和系统文件不指定目标路径，则默认目标路径为当前目录</td></tr><tr><td>copy con test.txt</td><td>从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件con代表屏幕，prn代表打印机，nul代表空设备</td></tr><tr><td>copy 1.txt + 2.txt 3.txt</td><td>合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件如果不指定 3.txt ，则保存到 1.txt</td></tr><tr><td>copy test.txt +</td><td>复制文件到自己，实际上是修改了文件日期</td></tr></tbody></table><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>设置cmd窗口的标题</p><h3 id="ver"><a href="#ver" class="headerlink" title="ver"></a>ver</h3><p>显示系统版本</p><h3 id="vol"><a href="#vol" class="headerlink" title="vol"></a>vol</h3><p>显示磁盘卷标和序列号(如果存在)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOL [drive:]</span><br></pre></td></tr></table></figure><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><p>创建、更改或删除磁盘的卷标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL [&#x2F;MP] [volume] [label]</span><br></pre></td></tr></table></figure><h4 id="MP"><a href="#MP" class="headerlink" title="/MP"></a>/MP</h4><p>指定卷应被视为装入点或卷名。</p><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>label</td><td>显示卷标，同时提示输入新卷标</td></tr><tr><td>label c:system</td><td>设置C盘的卷标为 system</td></tr></tbody></table><h3 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h3><p>暂停批处理程序，并显示以下消息:<br>    请按任意键继续. . .</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>在批处理文件或 CONFIG.SYS 里加上注解或说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REM [comment]   </span><br></pre></td></tr></table></figure><h3 id="date-time"><a href="#date-time" class="headerlink" title="date/time"></a>date/time</h3><p>显示或设置日期/时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATE&#x2F;TIME [&#x2F;T | date]</span><br></pre></td></tr></table></figure><h4 id="t"><a href="#t" class="headerlink" title="/t"></a>/t</h4><p>只显示当前日期/时间，不提示输入新时间</p><h3 id="goto-和"><a href="#goto-和" class="headerlink" title="goto 和 :"></a>goto 和 :</h3><p>跳转命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOTO label</span><br></pre></td></tr></table></figure><p>跳转到指定的标签那一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: label</span><br></pre></td></tr></table></figure><p>行首为:表示该行是标签行，标签行不执行操作</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>在文件中搜索字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FIND [&#x2F;V] [&#x2F;C] [&#x2F;N] [&#x2F;I] [&#x2F;OFF[LINE]] &quot;string&quot; [[drive:][path]filename[ ...]]</span><br></pre></td></tr></table></figure><h4 id="V-1"><a href="#V-1" class="headerlink" title="/V"></a>/V</h4><p>显示所有未包含指定字符串的行。</p><h4 id="C-1"><a href="#C-1" class="headerlink" title="/C"></a>/C</h4><p>仅显示包含字符串的行数。</p><h4 id="N-2"><a href="#N-2" class="headerlink" title="/N"></a>/N</h4><p>显示行号。</p><h4 id="I"><a href="#I" class="headerlink" title="/I"></a>/I</h4><p>搜索字符串时忽略大小写。</p><h4 id="OFF-LINE"><a href="#OFF-LINE" class="headerlink" title="/OFF[LINE]"></a>/OFF[LINE]</h4><p>不要跳过具有脱机属性集的文件。</p><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>find “abc” c:\test.txt</td><td>在 c:\test.txt 文件里查找含 abc 字符串的行如果找不到，将设 errorlevel 返回码为1</td></tr></tbody></table><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>逐屏显示输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MORE [&#x2F;E [&#x2F;C] [&#x2F;P] [&#x2F;S] [&#x2F;Tn] [+n]] &lt; [drive:][path]filename</span><br></pre></td></tr></table></figure><h4 id="E"><a href="#E" class="headerlink" title="/E"></a>/E</h4><p>启用扩展功能</p><h4 id="C-2"><a href="#C-2" class="headerlink" title="/C"></a>/C</h4><p>显示页面前先清除屏幕</p><h4 id="P-2"><a href="#P-2" class="headerlink" title="/P"></a>/P</h4><p>扩展 FormFeed 字符</p><h4 id="S-3"><a href="#S-3" class="headerlink" title="/S"></a>/S</h4><p>将多个空白行缩成一行</p><h4 id="Tn"><a href="#Tn" class="headerlink" title="/Tn"></a>/Tn</h4><p>将制表符扩展为 n 个空格(默认值为 8)</p><h4 id="n"><a href="#n" class="headerlink" title="+n"></a>+n</h4><p>从第 n 行开始显示第一个文件</p><h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h3><p>显示目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TREE [drive:][path] [&#x2F;F] [&#x2F;A]</span><br></pre></td></tr></table></figure><h4 id="F-1"><a href="#F-1" class="headerlink" title="/F"></a>/F</h4><p>显示每个文件夹中文件的名称。</p><h4 id="A-3"><a href="#A-3" class="headerlink" title="/A"></a>/A</h4><p>使用 ASCII 字符，而不使用扩展字符。</p><h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>顺序执行多条命令，而不管命令是否执行成功</p><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>c: &amp; cd\ &amp; dir /w</td><td>相当于把下面3行命令写到1行去了c: cd\ dir/w</td></tr></tbody></table><h3 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h3><p>顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令</p><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>f: &amp;&amp; cd\ &amp;&amp; dir &gt;c:\test.txt</td><td>注意如果f盘不存在，那么后面2条命令将不会执行</td></tr><tr><td>find “ok” c:\test.txt &amp;&amp; echo</td><td>成功如果找到了”ok”字样，就显示”成功”，找不到就不显示</td></tr></tbody></table><h3 id=""><a href="#" class="headerlink" title="|"></a>|</h3><p>管道命令<br>前一个命令的执行结果输出到后一个命令<br>语句|用处<br>–|–<br>dir . /s/a | find /c “.exe”|管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令该命令行结果,输出当前文件夹及所有子文件夹里的.exe文件的个数</p><p>type c:\test.txt|more这个和 more c:\test.txt 的效果是一样的</p><h3 id="-1"><a href="#-1" class="headerlink" title="||"></a>||</h3><p>顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令</p><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>find “ok” c:\test.txt || echo</td><td>不成功如果找不到”ok”字样，就显示”不成功”，找到了就不显示</td></tr></tbody></table><h3 id="gt-lt-gt-gt-lt-lt"><a href="#gt-lt-gt-gt-lt-lt" class="headerlink" title="&gt; &lt; &gt;&gt; &lt;&lt;"></a>&gt; &lt; &gt;&gt; &lt;&lt;</h3><p>管道工具，将各种命令造成的输出或所需要的输入重新定向<br>“&gt; &gt;&gt;” 是将命令产生的输出重新定向,比如到文件或打印机中<br>&gt;&gt; 产生的内容将追加进文件中，&gt; 则将原文件内容覆盖<br>“&lt; &lt;&lt;” 是将命令所需要输入的内容重新定向</p><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>dir *.bat /b&gt;p</td><td>将dir *.bat 例出的文件名输出到p文件中</td></tr><tr><td>time&lt;p</td><td>在批中可以是时间代码或回车符，可以以此改变时间</td></tr><tr><td>time&lt;p&gt;&gt;p.bat</td><td>p文件中仅存在一个回车符,则可以将时间追加进p.bat文件中</td></tr><tr><td>type p.bat&gt;prn</td><td>将p.bat打印出来.</td></tr><tr><td>copy null p</td><td>将p文件删除掉</td></tr><tr><td>copy con p</td><td>在屏幕上编辑p文件,F6可以存盘退出</td></tr><tr><td>type p&gt;pp</td><td>完成p文件到pp 的复制</td></tr><tr><td>type p|more</td><td>可在屏满时暂停显示</td></tr></tbody></table><h3 id="-2"><a href="#-2" class="headerlink" title="%"></a>%</h3><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>%0</td><td>表示当前批处理的路径,去掉引号的路径</td></tr><tr><td>%1 %2 %3……</td><td>命令行传递给批处理的第几个参数</td></tr><tr><td>%~I</td><td>删除任何引号(“)，扩展 %I</td></tr><tr><td>%~fI</td><td>将 %I 扩展到一个完全合格的路径名</td></tr><tr><td>%~dI</td><td>仅将 %I 扩展到一个驱动器号</td></tr><tr><td>%~pI</td><td>仅将 %I 扩展到一个路径</td></tr><tr><td>%~nI</td><td>仅将 %I 扩展到一个文件名</td></tr><tr><td>%~xI</td><td>仅将 %I 扩展到一个文件扩展名</td></tr><tr><td>%~sI</td><td>扩展的路径只含有短名</td></tr><tr><td>%~aI</td><td>将 %I 扩展到文件的文件属性</td></tr><tr><td>%~tI</td><td>将 %I 扩展到文件的日期/时间</td></tr><tr><td>%~zI</td><td>将 %I 扩展到文件的大小</td></tr><tr><td>%~$PATH:I</td><td>查找列在路径环境变量的目录，并将 %I 扩展到找到的第一个完全合格的名称。如果环境变量名未被定义，或者没有找到文件，此组合键会扩展到空字符串</td></tr></tbody></table><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>显示目前所有可用的变量，包括系统变量和自定义的变量</p><table><thead><tr><th>语句</th><th>用处</th></tr></thead><tbody><tr><td>echo %SystemDrive%</td><td>显示系统盘盘符。系统变量可以直接引用</td></tr><tr><td>set p</td><td>显示所有以p开头的变量，要是一个也没有就设errorlevel=1</td></tr><tr><td>set p=aa1bb1aa2bb2</td><td>设置变量p，并赋值为 = 后面的字符串，即aa1bb1aa2bb2</td></tr><tr><td>echo %p%</td><td>显示变量p代表的字符串，即aa1bb1aa2bb2</td></tr><tr><td>echo %p:~6%</td><td>显示变量p中第6个字符以后的所有字符，即aa2bb2</td></tr><tr><td>echo %p:~6,3%</td><td>显示第6个字符以后的3个字符，即aa2</td></tr><tr><td>echo %p:~0,3%</td><td>显示前3个字符，即aa1</td></tr><tr><td>echo %p:~-2%</td><td>显示最后面的2个字符，即b2</td></tr><tr><td>echo %p:~0,-2%</td><td>显示除了最后2个字符以外的其它字符，即aa1bb1aa2b</td></tr><tr><td>echo %p:aa=c%</td><td>用c替换变量p中所有的aa，即显示c1bb1c2bb2</td></tr><tr><td>echo %p:aa=%</td><td>将变量p中的所有aa字符串置换为空，即显示1bb12bb2</td></tr><tr><td>echo %p:*bb=c%</td><td>第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2</td></tr><tr><td>set p=%p:*bb=c%</td><td>设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2</td></tr><tr><td>set /a p=39</td><td>设置p为数值型变量，值为39</td></tr><tr><td>set /a p=39/10</td><td>支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3</td></tr><tr><td>set /a p=p/10</td><td>用 /a 参数时，在 = 后面的变量可以不加%直接引用set /a p=“1&amp;0” #”与”运算，要加引号</td></tr></tbody></table><h3 id="subst"><a href="#subst" class="headerlink" title="subst"></a>subst</h3><p>将路径与驱动器号关联<br>不带参数键入 SUBST，以显示当前虚拟驱动器的列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SUBST [drive1: [drive2:]path]</span><br><span class="line">SUBST drive1: &#x2F;D</span><br></pre></td></tr></table></figure><h4 id="D-2"><a href="#D-2" class="headerlink" title="/D"></a>/D</h4><p>删除被替换的</p><h3 id="xcopy-外部命令-文件拷贝"><a href="#xcopy-外部命令-文件拷贝" class="headerlink" title="xcopy (外部命令)文件拷贝"></a>xcopy (外部命令)文件拷贝</h3><p>复制文件和目录树。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">XCOPY source [destination] [&#x2F;A | &#x2F;M] [&#x2F;D[:date]] [&#x2F;P] [&#x2F;S [&#x2F;E]] [&#x2F;V] [&#x2F;W]</span><br><span class="line">                           [&#x2F;C] [&#x2F;I] [&#x2F;Q] [&#x2F;F] [&#x2F;L] [&#x2F;G] [&#x2F;H] [&#x2F;R] [&#x2F;T] [&#x2F;U]</span><br><span class="line">                           [&#x2F;K] [&#x2F;N] [&#x2F;O] [&#x2F;X] [&#x2F;Y] [&#x2F;-Y] [&#x2F;Z] [&#x2F;B] [&#x2F;J]</span><br><span class="line">                           [&#x2F;EXCLUDE:file1[+file2][+file3]...] [&#x2F;COMPRESS]</span><br></pre></td></tr></table></figure><h4 id="A-4"><a href="#A-4" class="headerlink" title="/A"></a>/A</h4><p>仅复制有存档属性集的文件，但不更改属性。</p><h4 id="M"><a href="#M" class="headerlink" title="/M"></a>/M</h4><p>仅复制有存档属性集的文件，并关闭存档属性。</p><h4 id="D-m-d-y"><a href="#D-m-d-y" class="headerlink" title="/D:m-d-y"></a>/D:m-d-y</h4><p>复制在指定日期或指定日期以后更改的文件。如果没有提供日期，则只复制源时间比目标时间新的文件。</p><h4 id="EXCLUDE-file1-file2-file3-…"><a href="#EXCLUDE-file1-file2-file3-…" class="headerlink" title="/EXCLUDE:file1[+file2][+file3]…"></a>/EXCLUDE:file1[+file2][+file3]…</h4><p>指定含有字符串的文件列表。每个字符串在文件中应位于单独的一行。如果任何字符串与复制文件的绝对路径的任何部分相符，则排除复制该文件。例如，指定如 \obj\ 或 .obj 的字符串会分别排除目录 obj 下面的所有文件或带有.obj 扩展名的所有文件。</p><h4 id="P-3"><a href="#P-3" class="headerlink" title="/P"></a>/P</h4><p>创建每个目标文件之前均进行提示。</p><h4 id="S-4"><a href="#S-4" class="headerlink" title="/S"></a>/S</h4><p>复制目录和子目录，不包括空目录。</p><h4 id="E-1"><a href="#E-1" class="headerlink" title="/E"></a>/E</h4><p>复制目录和子目录，包括空目录。与 /S /E 相同。可以用来修改 /T。</p><h4 id="V-2"><a href="#V-2" class="headerlink" title="/V"></a>/V</h4><p>验证每个新文件的大小。</p><h4 id="W-1"><a href="#W-1" class="headerlink" title="/W"></a>/W</h4><p>提示在复制前按键。</p><h4 id="C-3"><a href="#C-3" class="headerlink" title="/C"></a>/C</h4><p>即使有错误，也继续复制。</p><h4 id="I-1"><a href="#I-1" class="headerlink" title="/I"></a>/I</h4><p>如果目标不存在，且要复制多个文件，则假定目标必须是目录。</p><h4 id="Q-3"><a href="#Q-3" class="headerlink" title="/Q"></a>/Q</h4><p>复制时不显示文件名。</p><h4 id="F-2"><a href="#F-2" class="headerlink" title="/F"></a>/F</h4><p>复制时显示完整的源文件名和目标文件名。</p><h4 id="L-2"><a href="#L-2" class="headerlink" title="/L"></a>/L</h4><p>显示要复制的文件。</p><h4 id="G"><a href="#G" class="headerlink" title="/G"></a>/G</h4><p>允许将加密文件复制到不支持加密的目标。</p><h4 id="H"><a href="#H" class="headerlink" title="/H"></a>/H</h4><p>隐藏文件和系统文件也会复制。</p><h4 id="R-1"><a href="#R-1" class="headerlink" title="/R"></a>/R</h4><p>覆盖只读文件。</p><h4 id="T-1"><a href="#T-1" class="headerlink" title="/T"></a>/T</h4><p>创建目录结构，但不复制文件。不包括空目录或子目录。/T /E 包括空目录和子目录。</p><h4 id="U"><a href="#U" class="headerlink" title="/U"></a>/U</h4><p>只复制已经存在于目标中的文件。</p><h4 id="K"><a href="#K" class="headerlink" title="/K"></a>/K</h4><p>复制属性。一般的 Xcopy 会重置只读属性。</p><h4 id="N-3"><a href="#N-3" class="headerlink" title="/N"></a>/N</h4><p>用生成的短名称复制。</p><h4 id="O-1"><a href="#O-1" class="headerlink" title="/O"></a>/O</h4><p>复制文件所有权和 ACL 信息。</p><h4 id="X-1"><a href="#X-1" class="headerlink" title="/X"></a>/X</h4><p>复制文件审核设置(隐含 /O)。</p><h4 id="Y-2"><a href="#Y-2" class="headerlink" title="/Y"></a>/Y</h4><p>取消提示以确认要覆盖现有目标文件。</p><h4 id="Y-3"><a href="#Y-3" class="headerlink" title="/-Y"></a>/-Y</h4><p>触发提示，以确认要覆盖现有目标文件。</p><h4 id="Z-1"><a href="#Z-1" class="headerlink" title="/Z"></a>/Z</h4><p>在可重新启动模式下复制网络文件。</p><h4 id="B-2"><a href="#B-2" class="headerlink" title="/B"></a>/B</h4><p>复制符号链接本身与链接目标。</p><h4 id="J"><a href="#J" class="headerlink" title="/J"></a>/J</h4><p>复制时不使用缓冲的 I/O。推荐复制大文件时使用。</p><h4 id="COMPRESS"><a href="#COMPRESS" class="headerlink" title="/COMPRESS"></a>/COMPRESS</h4><p>如果适用，在传输期间请求网络压缩。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://blog.csdn.net/qq_33392141/article/details/92789509">批处理-从零开始</a></li><li><a href="https://zhidao.baidu.com/question/399469670.html">dos下的通配符都有哪些?</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;批处理简介&quot;&gt;&lt;a href=&quot;#批处理简介&quot; class=&quot;headerlink&quot; title=&quot;批处理简介&quot;&gt;&lt;/a&gt;批处理简介&lt;/h2&gt;&lt;p&gt;批处理文件是指文件后缀名为 “.bat”，“.cmd” 的文件，它的作用是可以一次批量执行大量的 DOS 命令，可以大大节省命令反复输入的繁琐。&lt;/p&gt;
&lt;h2 id=&quot;语法规则&quot;&gt;&lt;a href=&quot;#语法规则&quot; class=&quot;headerlink&quot; title=&quot;语法规则&quot;&gt;&lt;/a&gt;语法规则&lt;/h2&gt;&lt;h3 id=&quot;echo&quot;&gt;&lt;a href=&quot;#echo&quot; class=&quot;headerlink&quot; title=&quot;echo&quot;&gt;&lt;/a&gt;echo&lt;/h3&gt;&lt;p&gt;回显控制命令&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;语句&lt;/th&gt;
&lt;th&gt;用处&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;@&lt;/td&gt;
&lt;td&gt;关闭单行回显&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;echo off&lt;/td&gt;
&lt;td&gt;从下一行开始关闭回显&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@echo off&lt;/td&gt;
&lt;td&gt;从本行开始关闭回显。一般批处理第一行都是这个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;echo on&lt;/td&gt;
&lt;td&gt;从下一行开始打开回显&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;echo&lt;/td&gt;
&lt;td&gt;显示当前是 echo off 状态还是 echo on 状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;echo.&lt;/td&gt;
&lt;td&gt;输出一个”回车换行”，一般就是指空白行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;echo %errorlevel%&lt;/td&gt;
&lt;td&gt;每个命令运行结束，可以用这个命令行格式查看返回码用于判断刚才的命令是否执行成功。成功默认值为0。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="杂项" scheme="http://example.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>python-杂项</title>
    <link href="http://example.com/wiki/python-%E6%9D%82%E9%A1%B9/"/>
    <id>http://example.com/wiki/python-%E6%9D%82%E9%A1%B9/</id>
    <published>2021-04-06T02:56:35.000Z</published>
    <updated>2021-04-06T03:20:14.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raw_input(<span class="string">&quot;按下 enter 键退出，其他任意键显示...\n&quot;</span>)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;等待用户输入&quot;&gt;&lt;a href=&quot;#等待用户输入&quot; class=&quot;headerlink&quot; title=&quot;等待用户输入&quot;&gt;&lt;/a&gt;等待用户输入&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;raw_input(&lt;span class=&quot;string&quot;&gt;&amp;quot;按下 enter 键退出，其他任意键显示...\n&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-numpy库</title>
    <link href="http://example.com/wiki/python-numpy%E5%BA%93/"/>
    <id>http://example.com/wiki/python-numpy%E5%BA%93/</id>
    <published>2021-04-06T02:56:13.000Z</published>
    <updated>2021-04-07T09:16:40.891Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-迭代器</title>
    <link href="http://example.com/wiki/python-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://example.com/wiki/python-%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2021-04-06T02:55:45.000Z</published>
    <updated>2021-04-07T09:16:59.285Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-字符串</title>
    <link href="http://example.com/wiki/python-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/wiki/python-%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-04-06T02:54:39.000Z</published>
    <updated>2021-04-07T09:16:44.383Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-循环语句与条件语句</title>
    <link href="http://example.com/wiki/python-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>http://example.com/wiki/python-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</id>
    <published>2021-04-06T02:54:22.000Z</published>
    <updated>2021-04-07T09:16:54.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="if-条件语句"><a href="#if-条件语句" class="headerlink" title="if 条件语句"></a>if 条件语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">    执行语句<span class="number">1</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">    执行语句<span class="number">2</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">    执行语句<span class="number">3</span>……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    执行语句<span class="number">4</span>……</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm0mcxrg30ci07o47l.gif"></p><span id="more"></span><h2 id="While-循环语句"><a href="#While-循环语句" class="headerlink" title="While 循环语句"></a>While 循环语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件(condition)：</span><br><span class="line">    执行语句(statements)……</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2013/11/loop-over-python-list-animation.gif"></p><h2 id="For-循环语句"><a href="#For-循环语句" class="headerlink" title="For 循环语句"></a>For 循环语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence:</span><br><span class="line">   statements(s)</span><br></pre></td></tr></table></figure><h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><p>实例：使用嵌套循环输出2~100之间的素数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">100</span>):</span><br><span class="line">   j = <span class="number">2</span></span><br><span class="line">   <span class="keyword">while</span>(j &lt;= (i/j)):</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span>(i%j): <span class="keyword">break</span></span><br><span class="line">      j = j + <span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> (j &gt; i/j) : <span class="built_in">print</span> i, <span class="string">&quot; 是素数&quot;</span></span><br><span class="line">   i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h2><p>break语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。<br><img src="https://www.runoob.com/wp-content/uploads/2014/09/E5A591EF-6515-4BCB-AEAA-A97ABEFC5D7D.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> var &gt; <span class="number">0</span>:              </span><br><span class="line">   <span class="built_in">print</span> <span class="string">&#x27;当前变量值 :&#x27;</span>, var</span><br><span class="line">   var = var -<span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> var == <span class="number">5</span>:   <span class="comment"># 当变量 var 等于 5 时退出循环</span></span><br><span class="line">      <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h2><p>continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。<br><img src="https://www.runoob.com/wp-content/uploads/2014/09/8962A4F1-B78C-4877-B328-903366EA1470.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> var &gt; <span class="number">0</span>:              </span><br><span class="line">   var = var -<span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> var == <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   <span class="built_in">print</span> <span class="string">&#x27;当前变量值 :&#x27;</span>, var</span><br></pre></td></tr></table></figure><h2 id="pass-语句"><a href="#pass-语句" class="headerlink" title="pass 语句"></a>pass 语句</h2><p>Python pass 是空语句，是为了保持程序结构的完整性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;if-条件语句&quot;&gt;&lt;a href=&quot;#if-条件语句&quot; class=&quot;headerlink&quot; title=&quot;if 条件语句&quot;&gt;&lt;/a&gt;if 条件语句&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; 判断条件&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; 判断条件&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; 判断条件&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;……&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm0mcxrg30ci07o47l.gif&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-运算符</title>
    <link href="http://example.com/wiki/python-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://example.com/wiki/python-%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-04-06T02:53:48.000Z</published>
    <updated>2021-04-07T09:16:53.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>假设 a = 10，b = 20<br>运算符|描述|实例<br>–|–|–<br>+|加 - 两个对象相加|a + b 输出结果 30<br>-|减 - 得到负数或是一个数减去另一个数|a - b 输出结果 -10<br>*|乘 - 两个数相乘或是返回一个被重复若干次的字符串|a * b 输出结果 200<br>/|除 - x除以y|b / a 输出结果 2<br>%|取模 - 返回除法的余数|b % a 输出结果 0<br>**|幂 - 返回x的y次幂|a**b 为10的20次方， 输出结果 100000000000000000000<br>//|取整除 - 返回商的整数部分（向下取整）|9//2=4 -9//2=5</p><span id="more"></span><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>等于 - 比较对象是否相等</td><td>(a == b) 返回 False。</td></tr><tr><td>!=</td><td>不等于 - 比较两个对象是否不相等</td><td>(a != b) 返回 true.</td></tr><tr><td>&lt;&gt;</td><td>不等于 - 比较两个对象是否不相等。python3 已废弃。</td><td>(a &lt;&gt; b) 返回 true。这个运算符类似 != 。</td></tr><tr><td>&gt;</td><td>大于 - 返回x是否大于y</td><td>(a &gt; b) 返回 False。</td></tr><tr><td>&lt;</td><td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</td><td>(a &lt; b) 返回 true。</td></tr><tr><td>&gt;=</td><td>大于等于 - 返回x是否大于等于y。</td><td>(a &gt;= b) 返回 False。</td></tr><tr><td>&lt;=</td><td>小于等于 - 返回x是否小于等于y。</td><td>(a &lt;= b) 返回 true。</td></tr></tbody></table><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符</td><td>c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等效于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td>%=</td><td>取模赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c **= a 等效于 c = c ** a</td></tr><tr><td>//=</td><td>取整除赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td>|</td><td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td>(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td>^</td><td>按位异或运算符：当两对应的二进位相异时，结果为1</td><td>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td>~</td><td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1</td><td>(~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td></tr><tr><td>&lt;&lt;</td><td>左移动运算符：运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数字指定了移动的位数，高位丢弃，低位补0。</td><td>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，&gt;&gt; 右边的数字指定了移动的位数</td><td>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td><td>(a and b) 返回 20。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或” - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。</td><td>(a or b) 返回 10。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not(a and b) 返回 False</td></tr></tbody></table><h2 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False。</td><td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><h2 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>is 是判断两个标识符是不是引用自一个对象</td><td>x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用自不同对象</td><td>x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* / % //</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 ‘AND’</td></tr><tr><td>^ |</td><td>位运算符</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>&lt;&gt; == !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += *= **=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not and or</td><td>逻辑运算符</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;算术运算符&quot;&gt;&lt;a href=&quot;#算术运算符&quot; class=&quot;headerlink&quot; title=&quot;算术运算符&quot;&gt;&lt;/a&gt;算术运算符&lt;/h2&gt;&lt;p&gt;假设 a = 10，b = 20&lt;br&gt;运算符|描述|实例&lt;br&gt;–|–|–&lt;br&gt;+|加 - 两个对象相加|a + b 输出结果 30&lt;br&gt;-|减 - 得到负数或是一个数减去另一个数|a - b 输出结果 -10&lt;br&gt;*|乘 - 两个数相乘或是返回一个被重复若干次的字符串|a * b 输出结果 200&lt;br&gt;/|除 - x除以y|b / a 输出结果 2&lt;br&gt;%|取模 - 返回除法的余数|b % a 输出结果 0&lt;br&gt;**|幂 - 返回x的y次幂|a**b 为10的20次方， 输出结果 100000000000000000000&lt;br&gt;//|取整除 - 返回商的整数部分（向下取整）|9//2=4 -9//2=5&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python turtle库</title>
    <link href="http://example.com/wiki/python-turtle%E5%BA%93/"/>
    <id>http://example.com/wiki/python-turtle%E5%BA%93/</id>
    <published>2021-04-06T02:33:05.000Z</published>
    <updated>2021-04-12T02:46:34.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="画布-canvas"><a href="#画布-canvas" class="headerlink" title="画布(canvas)"></a>画布(canvas)</h2><p>画布就是turtle为我们展开用于绘图区域, 我们可以设置它的大小和初始位置。</p><h3 id="设置画布大小"><a href="#设置画布大小" class="headerlink" title="设置画布大小"></a>设置画布大小</h3><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">turtle.screensize(canvwidth&#x3D;None, canvheight&#x3D;None, bg&#x3D;None)</span><br></pre></td></tr></table></figure>参数分别为画布的宽(单位像素), 高, 背景颜色<br>如:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">turtle.screensize(800, 600, &quot;green&quot;)</span><br><span class="line">turtle.screensize() #返回默认大小(400, 300)</span><br></pre></td></tr></table></figure></li></ol><span id="more"></span><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">turtle.setup(width&#x3D;0.5, height&#x3D;0.75, startx&#x3D;None, starty&#x3D;None)</span><br></pre></td></tr></table></figure>参数:</li></ol><ul><li>width, height: 输入宽和高为整数时, 表示像素; 为小数时, 表示占据电脑屏幕的比例</li><li>(startx, starty): 这一坐标表示 矩形窗口左上角顶点的位置, 如果为空,则窗口位于屏幕中心<br>如:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">turtle.setup(width&#x3D;0.6, height&#x3D;0.6)</span><br><span class="line">turtle.setup(width&#x3D;800, height&#x3D;800, startx&#x3D;100, starty&#x3D;100)</span><br></pre></td></tr></table></figure></li></ul><h2 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h2><h3 id="画笔的状态"><a href="#画笔的状态" class="headerlink" title="画笔的状态"></a>画笔的状态</h3><p>在画布上,默认有一个坐标原点为画布中心的坐标轴, 坐标原点上有一只面朝x轴正方向小乌龟. 这里我们描述小乌龟时使用了两个词语:坐标原点(位置),面朝x轴正方向(方向), turtle绘图中, 就是使用位置方向描述小乌龟(画笔)的状态</p><h3 id="画笔的属性"><a href="#画笔的属性" class="headerlink" title="画笔的属性"></a>画笔的属性</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.pensize()</td><td>设置画笔宽度</td></tr><tr><td>turtle.pencolor()</td><td>设置画笔颜色，常用颜色{white,black,grey,dark,green,gold,violet,purple},也可以是RGB 3元组</td></tr><tr><td>turtle.speed()</td><td>设置画笔移动速度,画笔绘制的速度范围[0,10]整数, 数字越大越快</td></tr><tr><td>turtle.isvisible()</td><td>返回当前turtle是否可见</td></tr><tr><td>turtle.hideturtle()</td><td>隐藏箭头</td></tr><tr><td>turtle.showturtle()</td><td>显示箭头</td></tr><tr><td>turtle.shape()</td><td>设置海龟形状为指定的形状名</td></tr></tbody></table><h3 id="绘图命令"><a href="#绘图命令" class="headerlink" title="绘图命令"></a>绘图命令</h3><p>操纵海龟绘图有着许多的命令,这些命令可以划分为3种:一种为运动命令，一种为画笔控制命令,还有一种是全局控制命令</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.penup()</td><td>抬起画笔，之后移动画笔不绘制形状</td></tr><tr><td>turtle.pendown()</td><td>落下画笔，之后移动画笔绘制形状</td></tr><tr><td>turtle.forward(distance)</td><td>画笔向前移动distance距离</td></tr><tr><td>turtle.bacKward(distance)</td><td>画笔向后移动distance距离</td></tr><tr><td>turtle.right(degree)/turtle.left(degree)</td><td>绘制方向向右/左旋转degree度</td></tr><tr><td>turtle.setheading(to_angle)</td><td>设置海龟的朝向,0 - 东/90 - 北/180 - 西/270 - 南</td></tr><tr><td>turtle.setx(x)</td><td>设置海龟的横坐标</td></tr><tr><td>turtle.sety(y)</td><td>设置海龟的纵坐标</td></tr><tr><td>turtle.goto(x, y)/turtle.setposition(x, y)</td><td>移动到一个绝对坐标</td></tr><tr><td>turtle.home()</td><td>移至初始坐标</td></tr><tr><td>turtle.circle(radius, extent=None, steps=None)</td><td>画一个圆，半径为radius,角度为extent(默认360度),步长为step,可以以此画正多边形</td></tr><tr><td>turtle.fillcolor(colorstring)</td><td>绘制图形的填充颜色</td></tr><tr><td>turtle.color(color1, color2)</td><td>同时设置pencolor=color1，fillcolor=color2</td></tr><tr><td>turtle.filling()</td><td>返回当前是否在填充状态</td></tr><tr><td>turtle.begin_fill()</td><td>准备开始填充图形</td></tr><tr><td>turtle.end_fill()</td><td>填充完毕</td></tr><tr><td>turtle.clear()</td><td>清空turtle窗口，但是turtle的位置和状态不会改变</td></tr><tr><td>turtle.reset()</td><td>清空窗口，重置turtle状态为起始状态</td></tr><tr><td>turtle.undo()</td><td>撤销上一个turtle动作</td></tr><tr><td>turtle.stamp()</td><td>在海龟当前位置印制一个海龟形状</td></tr><tr><td>turtle.clearstamps(n=None)</td><td>删除全部或前/后 n 个海龟印章</td></tr><tr><td>turtle.write(s, font=(“font-name”,font-size,”font-type”))</td><td>写文本</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://zhuanlan.zhihu.com/p/90767333">python绘图工具turtle库的使用详解</a></li><li><a href="https://docs.python.org/zh-cn/3/library/turtle.html#turtle.stamp">turtle — 海龟绘图</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;画布-canvas&quot;&gt;&lt;a href=&quot;#画布-canvas&quot; class=&quot;headerlink&quot; title=&quot;画布(canvas)&quot;&gt;&lt;/a&gt;画布(canvas)&lt;/h2&gt;&lt;p&gt;画布就是turtle为我们展开用于绘图区域, 我们可以设置它的大小和初始位置。&lt;/p&gt;
&lt;h3 id=&quot;设置画布大小&quot;&gt;&lt;a href=&quot;#设置画布大小&quot; class=&quot;headerlink&quot; title=&quot;设置画布大小&quot;&gt;&lt;/a&gt;设置画布大小&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;turtle.screensize(canvwidth&amp;#x3D;None, canvheight&amp;#x3D;None, bg&amp;#x3D;None)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
参数分别为画布的宽(单位像素), 高, 背景颜色&lt;br&gt;如:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;turtle.screensize(800, 600, &amp;quot;green&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;turtle.screensize() #返回默认大小(400, 300)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="库" scheme="http://example.com/categories/python/%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>python 基础</title>
    <link href="http://example.com/wiki/python-%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/wiki/python-%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-06T02:28:32.000Z</published>
    <updated>2021-04-06T07:41:37.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-标识符"><a href="#Python-标识符" class="headerlink" title="Python 标识符"></a>Python 标识符</h2><p>在 Python 里，标识符由字母、数字、下划线组成。</p><p>在 Python 中，所有标识符可以包括英文、数字以及下划线 $_$，但不能以数字开头。</p><p>Python 中的标识符是区分大小写的。</p><p>以下划线开头的标识符是有特殊意义的。以单下划线开头 $_foo$ 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 $from xxx import *$ 而导入。</p><p>以双下划线开头的 $__foo$ 代表类的私有成员，以双下划线开头和结尾的 $<strong>foo</strong>$ 代表 Python 里特殊方法专用的标识，如 $<strong>init</strong>()$ 代表类的构造函数。</p><h2 id="Python-保留字符"><a href="#Python-保留字符" class="headerlink" title="Python 保留字符"></a>Python 保留字符</h2><table><tbody><tr><td>and</td><td>exec</td><td>not</td></tr><tr><td>assert</td><td>finally</td><td>or</td></tr><tr><td>break</td><td>for</td><td>pass</td></tr><tr><td>class</td><td>from</td><td>print</td></tr><tr><td>continue</td><td>global</td><td>raise</td></tr><tr><td>def</td><td>if</td><td>return</td></tr><tr><td>del</td><td>import</td><td>try</td></tr><tr><td>elif</td><td>in</td><td>while</td></tr><tr><td>else</td><td>is</td><td>with </td></tr><tr><td>except</td><td>lambda</td><td>yield</td></tr></tbody></table><span id="more"></span><h2 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h2><p>Python可以在同一行中使用多条语句，语句之间使用分号(;)分割。<br>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="print输出"><a href="#print输出" class="headerlink" title="print输出"></a>print输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span>(x,)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">print</span>(x,y)</span><br></pre></td></tr></table></figure><h2 id="行和缩进"><a href="#行和缩进" class="headerlink" title="行和缩进"></a>行和缩进</h2><p>Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。<br>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。</p><h2 id="Python注释"><a href="#Python注释" class="headerlink" title="Python注释"></a>Python注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h2><ul><li>Numbers（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Dictionary（字典）</li></ul><h2 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x [,base])</td><td>将x转换为一个整数</td></tr><tr><td>long(x [,base] )</td><td>将x转换为一个长整数</td></tr><tr><td>float(x)</td><td>将x转换到一个浮点数</td></tr><tr><td>complex(real [,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s 转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典。d 必须是一个序列 (key,value)元组。</td></tr><tr><td>frozenset(s)</td><td>转换为不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>unichr(x)</td><td>将一个整数转换为Unicode字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Python-标识符&quot;&gt;&lt;a href=&quot;#Python-标识符&quot; class=&quot;headerlink&quot; title=&quot;Python 标识符&quot;&gt;&lt;/a&gt;Python 标识符&lt;/h2&gt;&lt;p&gt;在 Python 里，标识符由字母、数字、下划线组成。&lt;/p&gt;
&lt;p&gt;在 Python 中，所有标识符可以包括英文、数字以及下划线 $_$，但不能以数字开头。&lt;/p&gt;
&lt;p&gt;Python 中的标识符是区分大小写的。&lt;/p&gt;
&lt;p&gt;以下划线开头的标识符是有特殊意义的。以单下划线开头 $_foo$ 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 $from xxx import *$ 而导入。&lt;/p&gt;
&lt;p&gt;以双下划线开头的 $__foo$ 代表类的私有成员，以双下划线开头和结尾的 $&lt;strong&gt;foo&lt;/strong&gt;$ 代表 Python 里特殊方法专用的标识，如 $&lt;strong&gt;init&lt;/strong&gt;()$ 代表类的构造函数。&lt;/p&gt;
&lt;h2 id=&quot;Python-保留字符&quot;&gt;&lt;a href=&quot;#Python-保留字符&quot; class=&quot;headerlink&quot; title=&quot;Python 保留字符&quot;&gt;&lt;/a&gt;Python 保留字符&lt;/h2&gt;&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;and&lt;/td&gt;&lt;td&gt;exec&lt;/td&gt;&lt;td&gt;not&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;assert&lt;/td&gt;&lt;td&gt;finally&lt;/td&gt;&lt;td&gt;or&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;break&lt;/td&gt;&lt;td&gt;for&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;class&lt;/td&gt;&lt;td&gt;from&lt;/td&gt;&lt;td&gt;print&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;continue&lt;/td&gt;&lt;td&gt;global&lt;/td&gt;&lt;td&gt;raise&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;def&lt;/td&gt;&lt;td&gt;if&lt;/td&gt;&lt;td&gt;return&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;del&lt;/td&gt;&lt;td&gt;import&lt;/td&gt;&lt;td&gt;try&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;elif&lt;/td&gt;&lt;td&gt;in&lt;/td&gt;&lt;td&gt;while&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;else&lt;/td&gt;&lt;td&gt;is&lt;/td&gt;&lt;td&gt;with &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;except&lt;/td&gt;&lt;td&gt;lambda&lt;/td&gt;&lt;td&gt;yield&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>将hexo博客部署到服务器</title>
    <link href="http://example.com/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-04-01T01:47:27.000Z</published>
    <updated>2021-04-05T09:33:46.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>服务器：阿里云轻量级服务器、centos7.3、1核、2G内存</li><li>hexo博客：Next主题，已经完成本地调试<span id="more"></span></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="本地计算机"><a href="#本地计算机" class="headerlink" title="本地计算机"></a>本地计算机</h3><p>本地先生成 ssh 密钥，打开cmd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>一路回车即可。<br>之后进入 C:\Users\用户名.ssh 文件夹（是隐藏文件，再文件查看中勾选隐藏文件），用记事本打开 id_rsa.pub 文件，复制并备用。</p><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>初学者建议安装宝塔面版进行操作</p><ol><li>更新系统<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update -y</span><br></pre></td></tr></table></figure></li><li>安装Node.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nodejs</span><br></pre></td></tr></table></figure></li><li>安装Git<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></li><li>检查安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure></li><li>安装Nginx<br>Nginx安装可以通过宝塔安装，或者自行百度。 </li><li>创建新的git用户并给其权限<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ adduser git#创建一个用户git</span><br><span class="line">$ sudo passwd git#设置git用户密码</span><br><span class="line"></span><br><span class="line">输入密码，密码太简单会给警告。</span><br><span class="line"></span><br><span class="line">$ chmod 740 &#x2F;etc&#x2F;sudoers#修改文件权限为用户可读写执行</span><br><span class="line">$ vim &#x2F;etc&#x2F;sudoers#编辑文件</span><br><span class="line"></span><br><span class="line">按 i 键进入编辑模式</span><br><span class="line">找到这里 “root  ALL&#x3D;(ALL)   ALL”</span><br><span class="line">在下面输入 “git   ALL&#x3D;(ALL)   ALL”</span><br><span class="line">按esc进入视图模式，再输入 :wq 保存退出</span><br><span class="line"></span><br><span class="line">$ chmod 400 &#x2F;etc&#x2F;sudoers  &#x2F;&#x2F;改回权限</span><br></pre></td></tr></table></figure></li><li>创建密钥文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ su git</span><br><span class="line">$ mkdir ~&#x2F;.ssh</span><br><span class="line">$ vim ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"></span><br><span class="line"># 把之前复制的 id_rsa.pub 文件粘贴到这</span><br><span class="line"></span><br><span class="line">$ chmod 600 &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">$ chmod 700 &#x2F;home&#x2F;git&#x2F;.ssh</span><br></pre></td></tr></table></figure></li><li>测试 ssh 连接<br>本地打开cmd窗口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@服务器ip</span><br></pre></td></tr></table></figure>输入密码后显示类似 Welcome to Alibaba Cloud Elastic Compute Service ! （我是阿里云服务器）的语句就说明你链接成功了。</li><li>创建网站的根目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">mkdir &#x2F;home&#x2F;hexo    # 此目录为网站的根目录</span><br><span class="line">chown git:git -R &#x2F;home&#x2F;hexo</span><br></pre></td></tr></table></figure></li><li>配置 Nginx<br>我是直接使用了宝塔创建站点，比较方便<br>如果要自己手动配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>配置文件样例:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80; # 监听的端口，默认是80</span><br><span class="line">    server_name _; # 你的域名，没有的话可以随便填，然后用端口访问;</span><br><span class="line">    index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    root &#x2F;home&#x2F;hexo; # 网站根目录</span><br><span class="line"></span><br><span class="line">    # 下面的无所谓，可以只写一个location &#x2F; &#123;&#125;</span><br><span class="line">    location ~ ^&#x2F;(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span><br><span class="line">    &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">    &#123;</span><br><span class="line">        expires      30d;</span><br><span class="line">        error_log &#x2F;dev&#x2F;null;</span><br><span class="line">        access_log &#x2F;dev&#x2F;null;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ~ .*\.(js|css)?$</span><br><span class="line">    &#123;</span><br><span class="line">        expires      12h;</span><br><span class="line">        error_log &#x2F;dev&#x2F;null;</span><br><span class="line">        access_log &#x2F;dev&#x2F;null; </span><br><span class="line">    &#125;</span><br><span class="line">    access_log  &#x2F;www&#x2F;wwwlogs&#x2F;47.105.106.249.log;</span><br><span class="line">    error_log  &#x2F;www&#x2F;wwwlogs&#x2F;47.105.106.249.error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>建立 git 裸库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">cd &#x2F;home&#x2F;git   # 在 git 用户目录下创建</span><br><span class="line">git init --bare hexo.git</span><br><span class="line">chown git:git -R hexo.git</span><br></pre></td></tr></table></figure></li><li>使用 git-hooks 同步网站根目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hexo.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>填入以下内容，如果根目录和仓库目录和我设的不一样就自己改一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">git --work-tree&#x3D;&#x2F;home&#x2F;hexo --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;hexo.git checkout -f</span><br></pre></td></tr></table></figure>完成后赋予权限<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chown -R git:git &#x2F;home&#x2F;git&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive</span><br><span class="line">$ chmod +x &#x2F;home&#x2F;git&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure></li><li>配置本地 Hexo 站点文件并部署<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@SERVER:&#x2F;home&#x2F;git&#x2F;hexo.git     # 填写你的服务器地址 将SERVER替换掉</span><br><span class="line">    branch: master      # 分支</span><br></pre></td></tr></table></figure>之后 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d。<br>打开刚刚设置的站点，部署成功。</li></ol><h2 id="各种问题"><a href="#各种问题" class="headerlink" title="各种问题"></a>各种问题</h2><ol><li>[emerg] getpwnam(“www”) failed</li></ol><ul><li>信息：Nginx的错误日志中给出如下信息：[emerg] 65814#0: getpwnam(“www”) failed</li><li>原因：没有创建www这个用户</li><li>解决：创建组和用户<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;sbin&#x2F;groupadd -f www</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;useradd -g www www</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>existing lock file /etc/subgid.lock without a PID</li></ol><ul><li>信息：useradd git -g git 后显示 useradd: existing lock file /etc/subgid.lock without a PID（也会有类似的文件）</li><li>原因：这个文件</li><li>解决：删除即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf &#x2F;etc&#x2F;subgid.lock </span><br><span class="line">useradd git -g git</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>Host key verification failed.</li></ol><ul><li>信息：ssh -v git@服务器ip 后显示  WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</li><li>原因：重置过服务器</li><li>解决：ssh-keygen -R IP地址</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://blog.csdn.net/weixin_41154636/article/details/99685965">hexo部署云服务器的全过程</a></li><li><a href="https://blog.csdn.net/u012383839/article/details/72875210">Nginx错误：[emerg] getpwnam(“www”) failed</a></li><li><a href="https://blog.csdn.net/weixin_34362790/article/details/93690469">linux下增加useradd提示existing lock file /etc/subgid.lock without a PID</a></li><li><a href="https://blog.csdn.net/wd2014610/article/details/85639741">解决Host key verification failed.(亲测有效)</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;服务器：阿里云轻量级服务器、centos7.3、1核、2G内存&lt;/li&gt;
&lt;li&gt;hexo博客：Next主题，已经完成本地调试</summary>
    
    
    
    <category term="服务器" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>centOS7服务器防火墙</title>
    <link href="http://example.com/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8-centOS7%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <id>http://example.com/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8-centOS7%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99/</id>
    <published>2021-03-30T12:48:59.000Z</published>
    <updated>2021-03-30T12:52:17.149Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>查看防火墙状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>running 状态即防火墙已经开启<br>dead 状态即防火墙未开启</p><span id="more"></span></li><li><p>开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure></li><li><p>查看端口是否已开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --query-port&#x3D;8888&#x2F;tcp</span><br></pre></td></tr></table></figure><p>提示yes表示已开通，提示no表示未开通。</p></li><li><p>开放端口号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port&#x3D;8888&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure><p>提示success表示成功。</p></li><li><p>开放一个范围的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port&#x3D;8000-9999&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure></li><li><p>重新载入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>关闭端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --remove-port&#x3D;8888&#x2F;tcp</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看防火墙状态&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl status firewalld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;running 状态即防火墙已经开启&lt;br&gt;dead 状态即防火墙未开启&lt;/p&gt;</summary>
    
    
    
    <category term="服务器" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="防火墙" scheme="http://example.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>jetbrain学生认证</title>
    <link href="http://example.com/wiki/%E6%9D%82%E9%A1%B9-jetbrain%E5%AD%A6%E7%94%9F%E8%AE%A4%E8%AF%81/"/>
    <id>http://example.com/wiki/%E6%9D%82%E9%A1%B9-jetbrain%E5%AD%A6%E7%94%9F%E8%AE%A4%E8%AF%81/</id>
    <published>2021-03-29T08:47:26.000Z</published>
    <updated>2021-04-07T09:18:48.346Z</updated>
    
    <content type="html"><![CDATA[<p>注：该方法有效期一年，过期须重新认证。</p><ul><li><p>进入 <a href="https://www.jetbrains.com/community/education/#students">学生免费申请界面</a></p></li><li><p>完成注册和登录</p></li><li><p>点击 Apply now ，进入学生认证。</p></li><li><p><img src="https://p9-tt.byteimg.com/origin/pgc-image/7b3bd75297e24175a77814a10ffd2713.png" alt="snipaste_2021-04-07_16-15-45.png"></p><span id="more"></span></li><li><p>因为白嫖党太多了，现在没法用学生邮箱认证，只能用官方文件</p></li><li><p>填写信息<br>官方文件建议用学生证，里面的信息拍清楚。<br>参考：<br><img src="https://p26-tt.byteimg.com/origin/pgc-image/839eddb7437c43a6ba073d609a4a8372.png" alt="snipaste_2021-04-07_16-15-46.png"></p></li><li><p>点击 申请免费产品</p></li><li><p>提交成功<br><img src="https://p6-tt.byteimg.com/origin/pgc-image/1f0b3472a506447fb6357d67e07b1bec.png" alt="snipaste_2021-04-07_16-35-13.png"></p></li><li><p>等待一周左右，官方会给你发消息通知你申请成功</p></li><li><p>查看 <a href="https://account.jetbrains.com/licenses#">许可证</a></p></li><li><p>下载 Jet Brain 的软件，填写许可证即可免费使用</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;注：该方法有效期一年，过期须重新认证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;进入 &lt;a href=&quot;https://www.jetbrains.com/community/education/#students&quot;&gt;学生免费申请界面&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;完成注册和登录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击 Apply now ，进入学生认证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;https://p9-tt.byteimg.com/origin/pgc-image/7b3bd75297e24175a77814a10ffd2713.png&quot; alt=&quot;snipaste_2021-04-07_16-15-45.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="杂项" scheme="http://example.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>考研流程</title>
    <link href="http://example.com/wiki/%E8%80%83%E7%A0%94-%E8%80%83%E7%A0%94%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/wiki/%E8%80%83%E7%A0%94-%E8%80%83%E7%A0%94%E6%B5%81%E7%A8%8B/</id>
    <published>2021-03-29T07:19:25.000Z</published>
    <updated>2021-04-05T09:34:45.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总流程图"><a href="#总流程图" class="headerlink" title="总流程图"></a>总流程图</h2><div id="flowchart-0" class="flow-chart"></div><h2 id="初试"><a href="#初试" class="headerlink" title="初试"></a>初试</h2><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>12月最后一个周末。</p><p>周六 </p><ul><li>8:30 - 11:30 政治 </li><li>14:00 - 17:00 外语</li></ul><p>周日</p><ul><li>8:30 - 11:30 业务课1 </li><li>14:00 - 17:00 业务课2</li></ul><p>ps.考研不能提前离开考场</p><h3 id="科目"><a href="#科目" class="headerlink" title="科目"></a>科目</h3><ol><li>政治<br>满分100分，考研最简单的科目，因为考的很杂，而且有时事政治的内容，所有强烈建议报班跟着老师复习。<br>单选题 16*1’、多选题 17*2’、论述题 5*10’</li></ol><ol start="2"><li><p>外语</p></li><li><p>业务课1<br>以我们计算机专业为例，业务课1就是考数学。<br>数学分为数学一和数学二，其中数学一考高数、线代和概率论，数学二考高数、线代，并且数学一比数学二难一点。</p></li><li><p>业务课2</p></li></ol><p>##<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 决定考研e1=>end: 上岸e2=>end: 再战、就业...c1=>condition: 初试(十二月最后一个周末)c2=>condition: 调剂复试(四月份)c3=>condition: 复试(四月份)c4=>condition: 通过国家线op1=>operation: 网上预报名(十月份)op2=>operation: 正式报名和现场确认(十一月)op3=>operation: 联系调剂院校op4=>operation: 拟录取(六月份)op5=>operation: ...st->op1->op2->c1(yes)->c3(yes)->op5->op4->e1c1(no)->c4(no)->e2c4(yes)->op3->c2(yes)->op4c2(no)->e2c3(no)->op3</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;总流程图&quot;&gt;&lt;a href=&quot;#总流程图&quot; class=&quot;headerlink&quot; title=&quot;总流程图&quot;&gt;&lt;/a&gt;总流程图&lt;/h2&gt;&lt;div id=&quot;flowchart-0&quot; class=&quot;flow-chart&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;初试&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/"/>
    
    
  </entry>
  
  <entry>
    <title>dp</title>
    <link href="http://example.com/wiki/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://example.com/wiki/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2021-03-29T06:48:50.000Z</published>
    <updated>2021-04-26T06:56:01.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><span id="more"></span><h2 id="算法说明"><a href="#算法说明" class="headerlink" title="算法说明"></a>算法说明</h2><h3 id="无优化"><a href="#无优化" class="headerlink" title="无优化"></a>无优化</h3><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;算法介绍&quot;&gt;&lt;a href=&quot;#算法介绍&quot; class=&quot;headerlink&quot; title=&quot;算法介绍&quot;&gt;&lt;/a&gt;算法介绍&lt;/h2&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>spfa</title>
    <link href="http://example.com/wiki/%E7%AE%97%E6%B3%95-spfa/"/>
    <id>http://example.com/wiki/%E7%AE%97%E6%B3%95-spfa/</id>
    <published>2021-03-29T06:48:50.000Z</published>
    <updated>2021-03-29T08:38:28.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><span id="more"></span><h2 id="算法说明"><a href="#算法说明" class="headerlink" title="算法说明"></a>算法说明</h2><h3 id="无优化"><a href="#无优化" class="headerlink" title="无优化"></a>无优化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    vis[s] = <span class="number">1</span>;dis[s] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = ed[i].ne) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = ed[i].v, w = ed[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w) &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(v), vis[v] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (++tim[v] &gt; n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SLF优化-双端队列优化"><a href="#SLF优化-双端队列优化" class="headerlink" title="SLF优化(双端队列优化)"></a>SLF优化(双端队列优化)</h3><p>SLF:Small Label First<br>就是如果要加入队列的值比队列头要小， 就把他放在队列头。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st)</span></span>&#123;</span><br><span class="line">    vis[st] = <span class="number">1</span>; dis[st] = <span class="number">0</span>;</span><br><span class="line">    deque&lt;<span class="keyword">int</span>&gt;q; q.<span class="built_in">push_front</span>(st);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop_front</span>();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = ed[i].ne)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = ed[i].v, w = ed[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)&#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v])&#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 优化</span></span><br><span class="line">                    <span class="keyword">if</span> (dis[v] &lt;= q.<span class="built_in">front</span>()) q.<span class="built_in">push_front</span>(dis[v]);</span><br><span class="line">                    <span class="keyword">else</span> q.<span class="built_in">push_back</span>(dis[v]);</span><br><span class="line">                    <span class="keyword">if</span> (++tim[v] &gt; n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LLL优化"><a href="#LLL优化" class="headerlink" title="LLL优化"></a>LLL优化</h3><p>LLL: Large label last<br>和队列中的平均值比， 比平均值大就不更新放在队列后面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st)</span></span>&#123;</span><br><span class="line">    vis[st] = <span class="number">1</span>; dis[st] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt;q; q.<span class="built_in">push</span>(st);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, cnt_s = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (u * cnt_s &gt; sum)&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(u);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        sum -= dis[u], cnt_s--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = ed[i].ne)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = ed[i].v, w = ed[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)&#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(v), vis[v] = <span class="number">1</span>;</span><br><span class="line">                    sum += dis[v], cnt_s++;</span><br><span class="line">                    <span class="keyword">if</span> (++tim[v] &gt; n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SLF-LLL（Large-Label-Last）"><a href="#SLF-LLL（Large-Label-Last）" class="headerlink" title="SLF + LLL（Large Label Last）"></a>SLF + LLL（Large Label Last）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    dis[u] = <span class="number">0</span>;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push_back</span>(u);</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = dis[u];</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        u = q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">while</span>(num * dis[u] &gt; sum)&#123;</span><br><span class="line">            q.<span class="built_in">pop_front</span>();q.<span class="built_in">push_back</span>(u);</span><br><span class="line">            u = q.<span class="built_in">front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">pop_front</span>();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        tim[u]++;</span><br><span class="line">        <span class="keyword">if</span> (tim[u] &gt; <span class="built_in">sqrt</span>(n + m)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = ed[i].ne)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = ed[i].v, w = ed[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)&#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                <span class="keyword">if</span> (!q.<span class="built_in">empty</span>() &amp;&amp; dis[v] &gt; dis[q.<span class="built_in">front</span>()]) q.<span class="built_in">push_back</span>(v);</span><br><span class="line">                <span class="keyword">else</span> q.<span class="built_in">push_front</span>(v);</span><br><span class="line">                vis[v] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非连通块找负环"><a href="#非连通块找负环" class="headerlink" title="非连通块找负环"></a>非连通块找负环</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ss=n+<span class="number">1</span>;<span class="comment">//找一个超级边，与其他边的距离为1，寻找一遍spfa(ss)找有没有非连通块的负权</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="built_in">addedge</span>(ss,i,<span class="number">0</span>);<span class="comment">// 注意 要是有向图 就得是这个顺序才行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">spfa</span>(ss))&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init</span>();<span class="comment">//注意在初始化一遍</span></span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;算法介绍&quot;&gt;&lt;a href=&quot;#算法介绍&quot; class=&quot;headerlink&quot; title=&quot;算法介绍&quot;&gt;&lt;/a&gt;算法介绍&lt;/h2&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="图论" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="最短路" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Dijkstra</title>
    <link href="http://example.com/wiki/%E7%AE%97%E6%B3%95-Dijkstra/"/>
    <id>http://example.com/wiki/%E7%AE%97%E6%B3%95-Dijkstra/</id>
    <published>2021-03-29T05:49:16.000Z</published>
    <updated>2021-03-29T08:38:32.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><span id="more"></span><h2 id="算法说明"><a href="#算法说明" class="headerlink" title="算法说明"></a>算法说明</h2><h3 id="普通-n-2-版"><a href="#普通-n-2-版" class="headerlink" title="普通$n^2$版"></a>普通$n^2$版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        dis[i] = <span class="built_in">min</span>(dis[i], ma[s][i]);<span class="comment">//先给点1初始化距离</span></span><br><span class="line">    <span class="keyword">int</span> index;   <span class="comment">//记录最短距离的下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123; <span class="comment">//找剩下的n-1 个点</span></span><br><span class="line">        <span class="keyword">int</span> minn = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; minn &gt; dis[j]) &#123;</span><br><span class="line">                minn = dis[j];</span><br><span class="line">                index = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[index] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            dis[j] = <span class="built_in">min</span>(dis[j], ma[index][j] + minn);<span class="comment">// 再根据minn更新dis</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优先队列优化"><a href="#优先队列优化" class="headerlink" title="优先队列优化"></a>优先队列优化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; q;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">P</span>(<span class="number">0</span>, s));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">top</span>().second; q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = ed[i].ne) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = ed[i].v, w = ed[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class="line">                dis[v] = dis[u] + w, q.<span class="built_in">push</span>(<span class="built_in">P</span>(dis[v], v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;算法介绍&quot;&gt;&lt;a href=&quot;#算法介绍&quot; class=&quot;headerlink&quot; title=&quot;算法介绍&quot;&gt;&lt;/a&gt;算法介绍&lt;/h2&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="图论" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="最短路" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
  </entry>
  
</feed>
