{"meta":{"title":"HsLotus的知识wiki","subtitle":"","description":"","author":"HsLotus","url":"http://example.com","root":"/"},"pages":[{"title":"Categories","date":"2021-03-28T08:31:00.725Z","updated":"2021-03-28T08:31:00.725Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-03-28T08:31:00.746Z","updated":"2021-03-28T08:31:00.746Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2021-03-28T08:31:00.722Z","updated":"2021-03-28T08:31:00.722Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"数据库-数据库概论理论概念","date":"2022-08-20T05:13:45.621Z","updated":"2022-04-06T10:22:59.293Z","comments":true,"path":"wiki/数据库-数据库概论理论概念/","link":"","permalink":"http://example.com/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E7%90%86%E8%AE%BA%E6%A6%82%E5%BF%B5/","excerpt":"","text":"数据库概论理论概念 关系模型的基本概念和基本术语共有十三个，它们分别是： 关系(Relation)：一个关系对应着一个二维表，二维表就是关系名。 元组(Tuple)：在二维表中的一行，称为一个元组。 属性(Attribute)：在二维表中的列，称为属性。属性的个数称为关系的元或度。列的值称为属性值； （值）域(Domain)：属性值的取值范围为值域。 分量：每一行对应的列的属性值，即元组中的一个属性值 关系模式：在二维表中的行定义，即对关系的描述称为关系模式。一般表示为（属性1，属性2，……,属性n），如老师的关系模型可以表示为教师（教师号，姓名，性别，年龄，职称，所在系）。 键(码)：如果在一个关系中存在唯一标识一个实体的一个属性或属性集称为实体的键，即使得在该关系的任何一个关系状态中的两个元组，在该属性上的值的组合都不同。 候选键(候选码)：若关系中的某一属性的值能唯一标识一个元组如果在关系的一个键中不能移去任何一个属性，否则它就不是这个关系的键，则称这个被指定的候选键为该关系的候选键或者候选码。 主键（主码）：在一个关系的若干候选键中指定一个用来唯一标识该关系的元组，则称这个被指定的候选键称为主关键字，或简称为主键、关键字、主码。每一个关系都有并且只有一主键，通常用较小的属性组合作为主键。例如学生表，选定“学号”作为数据操作的依据，则“学号”为主键。而在选课表中，主键为（学号，课程号）。 主属性和非主属性：关系中包含在任何一个候选键中的属性称为主属性，不包含在任何一个候选键中的属性为非主属性。 全键或者全码：一个关系模式中的所有属性的集合。 外键或者外码：关系中的某个属性虽然不是这个关系的主键，或者只是主键的，但它却是另外一个关系的主键时，则称之为外键或者外码。 超键或者超码：如果在关系的一个键中移去某个属性，它仍然是这个关系的键，则称这样的键为关系的超键或者超码。 参照关系与被参照关系：是指以外键相互联系的两个关系，可以相互转化。 数据库恢复技术要求有一定的冗余度。另外如果数据库操作不当，也会产生冗余数据。因此数据库不能在绝对意义上避免了数据重复。 数据库更新时的一致性，指数据库中的数据开始是正确的，随着状态转移，总是保持正确的状态，用户在任意时刻的任何请求返回的都是正确的结果。数据库以一定的模式存储数据，本质是对真实世界建模，因此这里的正确是指，数据满足真实世界各种约束（例如：完整性约束）。如果系统是完全可以控制的，就可以很容易实现更新时的一致性。 共享是指多用户、多种应用、多种语言互相覆盖地共享数据集合，所有用户可同时存取数据库中的数据。数据库是面向整个系统的，以最优的方式服务于一个或多个应用程序(用户)，实现数据共享。 数据库共享性高，是从全局分析和描述数据，就可以适合多个用户、各种应用共享数据的需求。信息可在统一的地方存储，共享的同时可显著减少数据冗余，节省存储空间。但是，并不是说完全没有冗余，只是相对冗余度降低而已。 数据库系统的特点： 数据结构化 数据共享性高，冗余度低且易扩展 数据独立性高 数据由数据库管理系统统一管理个控制 数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作。 事务处理可以确保除非事务性单元内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的单元，可以简化错误恢复并使应用程序更加可靠。一个逻辑工作单元要成为事务，必须满足所谓的ACID(原子性、一致性、隔离性和持久性)属性。 数据库完整性是指数据库中数据在逻辑上的一致性、正确性、有效性和相容性。数据库完整性由各种各样的完整性约束来保证，因此可以说数据库完整性设计就是数据库完整性约束的设计。数据库完整性约束可以通过DBMS或应用程序来实现，基于DBMS的完整性约束作为模式的一部分存入数据库中。通过DBMS实现的数据库完整性按照数据库设计步骤进行设计，而由应用软件实现的数据库完整性则纳入应用软件设计 可以分为： 实体完整性:保证关系中的每个元组都是可识别的和唯一的,指关系数据库中所有的表都必须有主键,而且表中不允许存在如下记录:无主键值的记录，主键值相同的记录 参照完整性:也称为引用完整性，现实世界中的实体之间往往存在着某种联系,在关系模型中，实体以及实体之间的联系都是用关系来表示的,这样就自然存在着关系与关系之间的引用，参照完整性就是描述实体之间的联系的，参照完整性一般是指多个实体或关系之间的关联关系; 用户定义完整性约束:是指根据应用环境的要求和实际的需要,对某一具体应用所涉及的数据提出约束性条件。这一约束机制一般不应由应用程序提供，而应有由关系模型提供定义并检验，主要包括字段有效性约束和记录有效性。实际上就是指明关系中属性的取值范围，防止属性的值与应用语义矛盾 主键是一种约束，唯一索引是一种索引，两者在本质上是不同的。 主键创建后一定包含一个唯一性索引，唯一性索引并不一定就是主键。 唯一性索引列允许空值，而主键列不允许为空值。 主键列在创建时，已经默认为空值 + 唯一索引了。 主键可以被其他表引用为外键，而唯一索引不能。 一个表最多只能创建一个主键，但可以创建多个唯一索引。 主键更适合那些不容易更改的唯一标识，如自动递增列、身份证号等。 在 RBO 模式下，主键的执行计划优先级要高于唯一索引。 两者可以提高查询的速度。 全外连接：任意一边有值就会显示。 内连接：只返回满足连接条件的数据（两边都有的才显示）。对应等值连接。 左外连接：只要左边有值就会显示。 右外连接：只要右边有值就会显示。 数据库事务的并发控制问题： 丢失修改：两个不同的事务同时获得了相同的数据,又都对这个数据进行了修改,那么先提交的事务的更新就会被后提交事务的更新覆盖掉. 脏读（未提交读) ：一个事务正在访问数据，而其他事务正在更新该数据，但尚未提交，此时会发生脏读问题，即第一个事务所读取的数据是“脏”的。 不可重复读：在一个事务内多次读同一数据，在该事务还没有结束时，另外的事务也访问该数据并对其做修改，从而导致第一个事务两次读取的数据不一样。 幻读：有两种情况 (1):事务T1按一定条件从数据库中读取了某些数据记录后,事务T2删除了其中部分记录,当T1再次按照相同条件读取数据时,发现某些记录神秘的消失了. (2):事务T1按一定条件从数据库中读取了某些数据记录后,事务T2插入了一些记录,当T1再次按照相同条件读取数据时,发现多了一些记录. 数据库利用加锁和阻塞来保证事物之间不同等级的隔离性,从而实现事务的互不干扰的访问和操作数据库. 四级隔离级别：定义用户之间隔离和交互的程度 **读未提交(read uncommitted)**：可以读到其他事务还没有提交的数据，但不允许丢失修改，会导致大量数据变化。一级封锁协议 **读已提交(read committed)**：可以看到其他事务添加的新纪录，而且其他事务对现存记录做出的修改一旦被提交，也可以看到，避免丢失修改和脏读。二级封锁协议 **可重复读(repeatable read)**：当前在执行的事务的变化无法被看到，同一事务中执行select数次结果都相同，避免丢失修改、脏读和不可重复读。增强的二级封锁协议 **可串行化(serializable)**：提供严格的事务隔离。它要求事务序列化执行，事务只能一个接着一个地执行，不能并发执行，避免所有并发控制问题。三级封锁协议 事务故障是由于程序执行错误而引起事务非预期的、异常终止的故障； 系统故障是指系统在运行过程中，由于某种原因，造成系统停止运行，以致事务在执行过程中以非正常的方式终止，致使内存中的信息丢失，而存储在外存上的数据未受影响； 介质故障是指外存储设备故障，主要有磁盘损坏，磁头碰撞盘面，突然的强磁场干扰，数据传输部件出错，磁盘控制器出错等 数据依赖 数据依赖指的是通过一个关系中属性间的相等与否体现出来的数据间的相互关系，其中最重要的是函数依赖和多值依赖。 函数依赖 设X,Y是关系R的两个属性集合，当任何时刻R中的任意两个元组中的X属性值相同时，则它们的Y属性值也相同，则称X函数决定Y，或Y函数依赖于X。 平凡函数依赖当关系中属性集合Y是属性集合X的子集时(Y?X)，存在函数依赖X→Y，即一组属性函数决定它的所有子集，这种函数依赖称为平凡函数依赖。 非平凡函数依赖 当关系中属性集合Y不是属性集合X的子集时，存在函数依赖X→Y，则称这种函数依赖为非平凡函数依赖。 完全函数依赖 设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。 部分函数依赖 设X,Y是关系R的两个属性集合，存在X→Y，若X’是X的真子集，存在X’→Y，则称Y部分函数依赖于X。 传递函数依赖 设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z，则称Z传递函数依赖于X。 函数依赖 设R(U)是一个属性集U上的关系模式，X和Y是U的子集。","categories":[],"tags":[]},{"title":"","slug":"数据库-sql","date":"2022-08-20T05:13:45.618Z","updated":"2022-04-06T10:08:15.140Z","comments":true,"path":"wiki/数据库-sql/","link":"","permalink":"http://example.com/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93-sql/","excerpt":"","text":"sql关系代数基础运算符号关系代数有五个基础运算符，这五个基础运算符能派生出其他组合运算符。它们分别是： 选择（σ， selection）、投影（π， projection）、叉乘（x， cross-product）、 差（-, set-difference）和并（υ, union） 它们和SQL语句的对应关系为： 选择（σ， selection）相当于SQL语句中的where，表示选出满足一定条件的行。如：σ rating&gt;8 (S2）相当于 select * from S2 where rating&gt;8; 投影（π， projection）相当于SQL语句中的 select…distinct， 表示选择哪些列。注意：投影是会去重的！如：π sname,rating (σ rating&gt;8 (S2）)相当于 select sname, rating from S2 where rating&gt;8; 叉乘（x， cross-product）相当于SQL语句中的from，表示穷举所有集合两边元素的组合量。如: AxB 相当于 select * from A, B; 注意：叉乘时两个集合不能有重名列 差（-, set-difference）R-S返回所有在R中而不在S中的元组 并（υ, union）RυS返回包含在R中或在S中的所有元组 关键字 ORDER BY 排序 DESC 升序 ASC 降序 DISTINCT 用于返回唯一不同的值 UNION 用于合并两个或多个 SELECT 语句的结果集。如果允许重复的值，请使用 UNION ALL。 123SELECT column_name(s) FROM table1UNION (ALL)SELECT column_name(s) FROM table2; GROUP BY 用于结合聚合函数，根据一个或多个列对结果集进行分组。 通常和集合函数SUM(),AVG().MAX(),MIN(),COUNT()等结合在一起，后接限制条件语句 having,不可用where语句！ ALTER 用于在已有的表中添加、删除或修改列。 ADD COLUMN &lt;列名&gt; &lt;类型&gt; 添加一个列 CHANGE COLUMN &lt;旧列名&gt; &lt;新列名&gt; &lt;新列类型&gt; 用来修改字段名字以及类型 ALTER COLUMN &lt;列名&gt; { SET DEFAULT &lt;默认值&gt; | DROP DEFAULT } 用来修改字段数据 MODIFY COLUMN &lt;列名&gt; &lt;类型&gt; 用来修改字段类型 DROP COLUMN &lt;列名&gt; 删除一个列 RENAME TO &lt;新表名&gt; 重命名一个列 GRANT 授予权限 GRANT UPDATE &lt;列名&gt; on &lt;表名&gt; to 用户","categories":[],"tags":[]},{"title":"","slug":"python爬虫","date":"2022-08-20T05:13:45.610Z","updated":"2021-05-01T06:12:57.446Z","comments":true,"path":"wiki/python爬虫/","link":"","permalink":"http://example.com/wiki/python%E7%88%AC%E8%99%AB/","excerpt":"","text":"requests模块介绍在python实现的网络爬虫中，用于网络请求发送的模块有两种，第一种为urllib模块，第二种为requests模块。urllib模块是一种比较古老的模块，在使用的过程中较为繁琐和不便。当requests模块出现后，就快速的代替了urllib模块。 使用方法：（requests编码流程） 指定url 发起请求 获取响应数据 持久化存储 实战爬取搜狗主页源码（requests入门）1234567891011import requests#step_1:指定urlurl = &#x27;https://www.sogou.com/&#x27;#step_2:发起请求:使用get方法发起get请求，该方法会返回一个响应对象。参数url表示请求对应的urlresponse = requests.get(url=url)#step_3:获取响应数据:通过调用响应对象的text属性，返回响应对象中存储的字符串形式的响应数据（页面源码数据）page_text = response.text#step_4:持久化存储with open(&#x27;./sogou.html&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.write(page_text)print(&#x27;爬取数据完毕！！！&#x27;) 爬取搜狗指定词条对应的搜索结果页面（requests的get请求、UA伪装）123456789101112131415161718192021import requests#指定搜索关键字word = input(&#x27;enter a word you want to search:&#x27;)#自定义请求头信息:UA伪装,将包含了User-Agent的字典作用到请求方法的headers参数中即可headers=&#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&#x27;, &#125;#指定url，原始url可能是https://www.sogou.com/web?query=撩妹，发现该url携带了参数url = &#x27;https://www.sogou.com/web&#x27;#封装get请求参数：如果请求携带了参数，则可以将参数封装到字典中结合这requests请求方法中的data/params参数进行url参数的处理param = &#123; &#x27;query&#x27;:word,&#125;#发起请求response = requests.get(url=url,params=param,headers=headers)#获取响应数据page_text = response.text#持久化存储fileName = word+&#x27;.html&#x27;with open(fileName,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.write(page_text) 爬取百度翻译（requests模块的post请求、json）123456789101112131415161718192021import requestsimport jsonword = input(&#x27;enter a English word:&#x27;)#自定义请求头信息:UA伪装,将包含了User-Agent的字典作用到请求方法的headers参数中即可headers=&#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&#x27;, &#125;#指定url，原始url可能是https://www.sogou.com/web?query=撩妹，发现该url携带了参数url = &#x27;https://fanyi.baidu.com/sug&#x27;#封装post请求参数：如果请求携带了参数，则可以将参数封装到字典中结合这requests请求方法中的data/params参数进行url参数的处理data = &#123; &#x27;kw&#x27;:word,&#125;#发起请求response = requests.post(url=url,data=data,headers=headers)#获取响应数据:如果响应回来的数据为json，则可以直接调用响应对象的json方法获取json对象数据json_data = response.json()#持久化存储fileName = word+&#x27;.json&#x27;fp = open(fileName,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;)json.dump(json_data,fp,ensure_ascii=False)","categories":[],"tags":[]},{"title":"批处理入门","slug":"批处理入门","date":"2021-04-25T05:20:55.000Z","updated":"2021-04-25T11:36:13.605Z","comments":true,"path":"wiki/批处理入门/","link":"","permalink":"http://example.com/wiki/%E6%89%B9%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8/","excerpt":"批处理简介批处理文件是指文件后缀名为 “.bat”，“.cmd” 的文件，它的作用是可以一次批量执行大量的 DOS 命令，可以大大节省命令反复输入的繁琐。 语法规则echo回显控制命令 语句 用处 @ 关闭单行回显 echo off 从下一行开始关闭回显 @echo off 从本行开始关闭回显。一般批处理第一行都是这个 echo on 从下一行开始打开回显 echo 显示当前是 echo off 状态还是 echo on 状态 echo. 输出一个”回车换行”，一般就是指空白行 echo %errorlevel% 每个命令运行结束，可以用这个命令行格式查看返回码用于判断刚才的命令是否执行成功。成功默认值为0。","text":"批处理简介批处理文件是指文件后缀名为 “.bat”，“.cmd” 的文件，它的作用是可以一次批量执行大量的 DOS 命令，可以大大节省命令反复输入的繁琐。 语法规则echo回显控制命令 语句 用处 @ 关闭单行回显 echo off 从下一行开始关闭回显 @echo off 从本行开始关闭回显。一般批处理第一行都是这个 echo on 从下一行开始打开回显 echo 显示当前是 echo off 状态还是 echo on 状态 echo. 输出一个”回车换行”，一般就是指空白行 echo %errorlevel% 每个命令运行结束，可以用这个命令行格式查看返回码用于判断刚才的命令是否执行成功。成功默认值为0。 dir显示目录中的文件和子目录列表 1DIR [drive:][path][filename] [&#x2F;A[[:]attributes]] [&#x2F;B] [&#x2F;C] [&#x2F;D] [&#x2F;L] [&#x2F;N] [&#x2F;O\\[[:]sortorder]] [&#x2F;P] [&#x2F;Q] [&#x2F;R] [&#x2F;S] [&#x2F;T[[:]timefield]] [&#x2F;W] [&#x2F;X] [&#x2F;4] /A显示具有指定属性的文件。 D 目录 R 只读文件 H 隐藏文件 A 准备存档的文件 S 系统文件 I 无内容索引文件 L 重新分析点 O 脱机文件 - 表示“否”的前缀/B使用空格式(没有标题信息或摘要)。/C在文件大小中显示千位数分隔符。这是默认值。用 /-C 来禁用分隔符显示。/D跟宽式相同，但文件是按栏分类列出的。/L用小写。/N新的长列表格式，其中文件名在最右边。/O用分类顺序列出文件。 N 按名称(字母顺序) S 按大小(从小到大) E 按扩展名(字母顺序) D 按日期/时间(从先到后) G 组目录优先 - 反转顺序的前缀/P在每个信息屏幕后暂停。/Q显示文件所有者。/R显示文件的备用数据流。/S显示指定目录和所有子目录中的文件。/T控制显示或用来分类的时间字符域 C 创建时间 A 上次访问时间 W 上次写入的时间/W用宽列表格式。/X显示为非 8dot3 文件名产生的短名称。格式是 /N 的格式，短名称插在长名称前面。如果没有短名称，在其位置则显示空白。/4以四位数字显示年份 chdir(简写cd)更改当前目录，文件名带空格，路径前需要加上引号！！ 1CD [&#x2F;D] [drive:][path] /d除了改变驱动器的当前目录之外，还可改变当前驱动器。 语句 用处 cd mp3 进入当前目录中的 mp3 目录 cd .. 进入当前目录中的上级目录 cd\\ 进入根目录 cd 显示当前目录 cd /d d:\\mp3 可以同时更改盘符和目录 mkdir(简写md)创建目录 1MD [drive:]path 语句 用处 md abc 在当前目录里建立子目录 abc md d:\\a\\b\\c 如果 d:\\a 不存在，将会自动创建 rmdir(简写rd)删除一个目录 1RD [&#x2F;S] [&#x2F;Q] [drive:]path /S除目录本身外，还将删除指定目录下的所有子目录和文件。用于删除目录树。 /Q安静模式，带 /S 删除目录树时不要求确认 del(同erase)删除文件 1DEL [&#x2F;P] [&#x2F;F] [&#x2F;S] [&#x2F;Q] [&#x2F;A[[:]attributes]] names /P删除每一个文件之前提示确认。 /F强制删除只读文件。 /S删除所有子目录中的指定的文件。 /Q安静模式。删除全局通配符时，不要求确认 /A根据属性选择要删除的文件 R 只读文件 S 系统文件 H 隐藏文件 A 准备存档的文件 I 无内容索引文件 L 重新分析点 O 脱机文件 - 表示“否”的前缀 rename(简写ren)文件重命名 1REN [drive:][path]filename1 filename2. 语句 用处 ren 1.txt 2.bak 把 1.txt 更名为 2.bak ren *.txt *.ini 把当前目录里所有.txt文件改成.ini文件 ren d:\\temp tmp 支持对文件夹的重命名 cls清屏 type显示文件内容 1TYPE [drive:][path]filename 语句 用处 type *.txt 显示当前目录里所有.txt文件的内容 copy拷贝文件 1COPY [&#x2F;D] [&#x2F;V] [&#x2F;N] [&#x2F;Y | &#x2F;-Y] [&#x2F;Z] [&#x2F;L] [&#x2F;A | &#x2F;B ] source [&#x2F;A | &#x2F;B] [+ source [&#x2F;A | &#x2F;B] [+ ...]] [destination [&#x2F;A | &#x2F;B]] /A表示一个 ASCII 文本文件。 /B表示一个二进位文件。 /D允许解密要创建的目标文件 /V验证新文件写入是否正确。 /N复制带有非 8dot3 名称的文件时，尽可能使用短文件名。 /Y不使用确认是否要覆盖现有目标文件的提示。 /-Y使用确认是否要覆盖现有目标文件的提示。 /Z用可重新启动模式复制已联网的文件。 /L如果源是符号链接，请将链接复制到目标而不是源链接指向的实际文件。 语句 用处 copy c:\\test.txt d:\\ 复制 c:\\test.txt 文件到 d: copy c:\\test.txt d:\\test.bak 复制 c:\\test.txt 文件到 d:\\ ，并重命名为 test.bak copy c:*.* 复制 c:\\ 所有文件到当前目录，不包括隐藏文件和系统文件不指定目标路径，则默认目标路径为当前目录 copy con test.txt 从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件con代表屏幕，prn代表打印机，nul代表空设备 copy 1.txt + 2.txt 3.txt 合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件如果不指定 3.txt ，则保存到 1.txt copy test.txt + 复制文件到自己，实际上是修改了文件日期 title设置cmd窗口的标题 ver显示系统版本 vol显示磁盘卷标和序列号(如果存在) 1VOL [drive:] label创建、更改或删除磁盘的卷标。 1LABEL [&#x2F;MP] [volume] [label] /MP指定卷应被视为装入点或卷名。 语句 用处 label 显示卷标，同时提示输入新卷标 label c:system 设置C盘的卷标为 system pause暂停批处理程序，并显示以下消息: 请按任意键继续. . . rem在批处理文件或 CONFIG.SYS 里加上注解或说明 1REM [comment] date/time显示或设置日期/时间 1DATE&#x2F;TIME [&#x2F;T | date] /t只显示当前日期/时间，不提示输入新时间 goto 和 :跳转命令 1GOTO label 跳转到指定的标签那一行 1: label 行首为:表示该行是标签行，标签行不执行操作 find在文件中搜索字符串 1FIND [&#x2F;V] [&#x2F;C] [&#x2F;N] [&#x2F;I] [&#x2F;OFF[LINE]] &quot;string&quot; [[drive:][path]filename[ ...]] /V显示所有未包含指定字符串的行。 /C仅显示包含字符串的行数。 /N显示行号。 /I搜索字符串时忽略大小写。 /OFF[LINE]不要跳过具有脱机属性集的文件。 语句 用处 find “abc” c:\\test.txt 在 c:\\test.txt 文件里查找含 abc 字符串的行如果找不到，将设 errorlevel 返回码为1 more逐屏显示输出 1MORE [&#x2F;E [&#x2F;C] [&#x2F;P] [&#x2F;S] [&#x2F;Tn] [+n]] &lt; [drive:][path]filename /E启用扩展功能 /C显示页面前先清除屏幕 /P扩展 FormFeed 字符 /S将多个空白行缩成一行 /Tn将制表符扩展为 n 个空格(默认值为 8) +n从第 n 行开始显示第一个文件 tree显示目录结构 1TREE [drive:][path] [&#x2F;F] [&#x2F;A] /F显示每个文件夹中文件的名称。 /A使用 ASCII 字符，而不使用扩展字符。 &amp;顺序执行多条命令，而不管命令是否执行成功 语句 用处 c: &amp; cd\\ &amp; dir /w 相当于把下面3行命令写到1行去了c: cd\\ dir/w &amp;&amp;顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令 语句 用处 f: &amp;&amp; cd\\ &amp;&amp; dir &gt;c:\\test.txt 注意如果f盘不存在，那么后面2条命令将不会执行 find “ok” c:\\test.txt &amp;&amp; echo 成功如果找到了”ok”字样，就显示”成功”，找不到就不显示 |管道命令前一个命令的执行结果输出到后一个命令语句|用处–|–dir . /s/a | find /c “.exe”|管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令该命令行结果,输出当前文件夹及所有子文件夹里的.exe文件的个数 type c:\\test.txt|more这个和 more c:\\test.txt 的效果是一样的 ||顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令 语句 用处 find “ok” c:\\test.txt || echo 不成功如果找不到”ok”字样，就显示”不成功”，找到了就不显示 &gt; &lt; &gt;&gt; &lt;&lt;管道工具，将各种命令造成的输出或所需要的输入重新定向“&gt; &gt;&gt;” 是将命令产生的输出重新定向,比如到文件或打印机中&gt;&gt; 产生的内容将追加进文件中，&gt; 则将原文件内容覆盖“&lt; &lt;&lt;” 是将命令所需要输入的内容重新定向 语句 用处 dir *.bat /b&gt;p 将dir *.bat 例出的文件名输出到p文件中 time&lt;p 在批中可以是时间代码或回车符，可以以此改变时间 time&lt;p&gt;&gt;p.bat p文件中仅存在一个回车符,则可以将时间追加进p.bat文件中 type p.bat&gt;prn 将p.bat打印出来. copy null p 将p文件删除掉 copy con p 在屏幕上编辑p文件,F6可以存盘退出 type p&gt;pp 完成p文件到pp 的复制 type p|more 可在屏满时暂停显示 % 语句 用处 %0 表示当前批处理的路径,去掉引号的路径 %1 %2 %3…… 命令行传递给批处理的第几个参数 %~I 删除任何引号(“)，扩展 %I %~fI 将 %I 扩展到一个完全合格的路径名 %~dI 仅将 %I 扩展到一个驱动器号 %~pI 仅将 %I 扩展到一个路径 %~nI 仅将 %I 扩展到一个文件名 %~xI 仅将 %I 扩展到一个文件扩展名 %~sI 扩展的路径只含有短名 %~aI 将 %I 扩展到文件的文件属性 %~tI 将 %I 扩展到文件的日期/时间 %~zI 将 %I 扩展到文件的大小 %~$PATH:I 查找列在路径环境变量的目录，并将 %I 扩展到找到的第一个完全合格的名称。如果环境变量名未被定义，或者没有找到文件，此组合键会扩展到空字符串 set显示目前所有可用的变量，包括系统变量和自定义的变量 语句 用处 echo %SystemDrive% 显示系统盘盘符。系统变量可以直接引用 set p 显示所有以p开头的变量，要是一个也没有就设errorlevel=1 set p=aa1bb1aa2bb2 设置变量p，并赋值为 = 后面的字符串，即aa1bb1aa2bb2 echo %p% 显示变量p代表的字符串，即aa1bb1aa2bb2 echo %p:~6% 显示变量p中第6个字符以后的所有字符，即aa2bb2 echo %p:~6,3% 显示第6个字符以后的3个字符，即aa2 echo %p:~0,3% 显示前3个字符，即aa1 echo %p:~-2% 显示最后面的2个字符，即b2 echo %p:~0,-2% 显示除了最后2个字符以外的其它字符，即aa1bb1aa2b echo %p:aa=c% 用c替换变量p中所有的aa，即显示c1bb1c2bb2 echo %p:aa=% 将变量p中的所有aa字符串置换为空，即显示1bb12bb2 echo %p:*bb=c% 第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2 set p=%p:*bb=c% 设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2 set /a p=39 设置p为数值型变量，值为39 set /a p=39/10 支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3 set /a p=p/10 用 /a 参数时，在 = 后面的变量可以不加%直接引用set /a p=“1&amp;0” #”与”运算，要加引号 subst将路径与驱动器号关联不带参数键入 SUBST，以显示当前虚拟驱动器的列表。 12SUBST [drive1: [drive2:]path]SUBST drive1: &#x2F;D /D删除被替换的 xcopy (外部命令)文件拷贝复制文件和目录树。 1234XCOPY source [destination] [&#x2F;A | &#x2F;M] [&#x2F;D[:date]] [&#x2F;P] [&#x2F;S [&#x2F;E]] [&#x2F;V] [&#x2F;W] [&#x2F;C] [&#x2F;I] [&#x2F;Q] [&#x2F;F] [&#x2F;L] [&#x2F;G] [&#x2F;H] [&#x2F;R] [&#x2F;T] [&#x2F;U] [&#x2F;K] [&#x2F;N] [&#x2F;O] [&#x2F;X] [&#x2F;Y] [&#x2F;-Y] [&#x2F;Z] [&#x2F;B] [&#x2F;J] [&#x2F;EXCLUDE:file1[+file2][+file3]...] [&#x2F;COMPRESS] /A仅复制有存档属性集的文件，但不更改属性。 /M仅复制有存档属性集的文件，并关闭存档属性。 /D:m-d-y复制在指定日期或指定日期以后更改的文件。如果没有提供日期，则只复制源时间比目标时间新的文件。 /EXCLUDE:file1[+file2][+file3]…指定含有字符串的文件列表。每个字符串在文件中应位于单独的一行。如果任何字符串与复制文件的绝对路径的任何部分相符，则排除复制该文件。例如，指定如 \\obj\\ 或 .obj 的字符串会分别排除目录 obj 下面的所有文件或带有.obj 扩展名的所有文件。 /P创建每个目标文件之前均进行提示。 /S复制目录和子目录，不包括空目录。 /E复制目录和子目录，包括空目录。与 /S /E 相同。可以用来修改 /T。 /V验证每个新文件的大小。 /W提示在复制前按键。 /C即使有错误，也继续复制。 /I如果目标不存在，且要复制多个文件，则假定目标必须是目录。 /Q复制时不显示文件名。 /F复制时显示完整的源文件名和目标文件名。 /L显示要复制的文件。 /G允许将加密文件复制到不支持加密的目标。 /H隐藏文件和系统文件也会复制。 /R覆盖只读文件。 /T创建目录结构，但不复制文件。不包括空目录或子目录。/T /E 包括空目录和子目录。 /U只复制已经存在于目标中的文件。 /K复制属性。一般的 Xcopy 会重置只读属性。 /N用生成的短名称复制。 /O复制文件所有权和 ACL 信息。 /X复制文件审核设置(隐含 /O)。 /Y取消提示以确认要覆盖现有目标文件。 /-Y触发提示，以确认要覆盖现有目标文件。 /Z在可重新启动模式下复制网络文件。 /B复制符号链接本身与链接目标。 /J复制时不使用缓冲的 I/O。推荐复制大文件时使用。 /COMPRESS如果适用，在传输期间请求网络压缩。 参考资料 批处理-从零开始 dos下的通配符都有哪些?","categories":[{"name":"杂项","slug":"杂项","permalink":"http://example.com/categories/%E6%9D%82%E9%A1%B9/"}],"tags":[]},{"title":"python-杂项","slug":"python-杂项","date":"2021-04-06T02:56:35.000Z","updated":"2021-04-06T03:20:14.149Z","comments":true,"path":"wiki/python-杂项/","link":"","permalink":"http://example.com/wiki/python-%E6%9D%82%E9%A1%B9/","excerpt":"等待用户输入1raw_input(&quot;按下 enter 键退出，其他任意键显示...\\n&quot;)","text":"等待用户输入1raw_input(&quot;按下 enter 键退出，其他任意键显示...\\n&quot;) 参考资料","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"python-numpy库","slug":"python-numpy库","date":"2021-04-06T02:56:13.000Z","updated":"2021-04-07T09:16:40.891Z","comments":true,"path":"wiki/python-numpy库/","link":"","permalink":"http://example.com/wiki/python-numpy%E5%BA%93/","excerpt":"","text":"参考资料","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"python-迭代器","slug":"python-迭代器","date":"2021-04-06T02:55:45.000Z","updated":"2021-04-07T09:16:59.285Z","comments":true,"path":"wiki/python-迭代器/","link":"","permalink":"http://example.com/wiki/python-%E8%BF%AD%E4%BB%A3%E5%99%A8/","excerpt":"","text":"参考资料","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"python-字符串","slug":"python-字符串","date":"2021-04-06T02:54:39.000Z","updated":"2021-04-07T09:16:44.383Z","comments":true,"path":"wiki/python-字符串/","link":"","permalink":"http://example.com/wiki/python-%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"参考资料","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"python-循环语句与条件语句","slug":"python-循环语句与条件语句","date":"2021-04-06T02:54:22.000Z","updated":"2021-04-07T09:16:54.412Z","comments":true,"path":"wiki/python-循环语句与条件语句/","link":"","permalink":"http://example.com/wiki/python-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/","excerpt":"if 条件语句12345678if 判断条件1: 执行语句1……elif 判断条件2: 执行语句2……elif 判断条件3: 执行语句3……else: 执行语句4……","text":"if 条件语句12345678if 判断条件1: 执行语句1……elif 判断条件2: 执行语句2……elif 判断条件3: 执行语句3……else: 执行语句4…… While 循环语句12while 判断条件(condition)： 执行语句(statements)…… For 循环语句12for iterating_var in sequence: statements(s) 循环嵌套实例：使用嵌套循环输出2~100之间的素数 12345678i = 2while(i &lt; 100): j = 2 while(j &lt;= (i/j)): if not(i%j): break j = j + 1 if (j &gt; i/j) : print i, &quot; 是素数&quot; i = i + 1 break 语句break语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。 123456var = 10while var &gt; 0: print &#x27;当前变量值 :&#x27;, var var = var -1 if var == 5: # 当变量 var 等于 5 时退出循环 break continue 语句continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。 123456var = 10while var &gt; 0: var = var -1 if var == 5: continue print &#x27;当前变量值 :&#x27;, var pass 语句Python pass 是空语句，是为了保持程序结构的完整性。 参考资料","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"python-运算符","slug":"python-运算符","date":"2021-04-06T02:53:48.000Z","updated":"2021-04-07T09:16:53.048Z","comments":true,"path":"wiki/python-运算符/","link":"","permalink":"http://example.com/wiki/python-%E8%BF%90%E7%AE%97%E7%AC%A6/","excerpt":"算术运算符假设 a = 10，b = 20运算符|描述|实例–|–|–+|加 - 两个对象相加|a + b 输出结果 30-|减 - 得到负数或是一个数减去另一个数|a - b 输出结果 -10*|乘 - 两个数相乘或是返回一个被重复若干次的字符串|a * b 输出结果 200/|除 - x除以y|b / a 输出结果 2%|取模 - 返回除法的余数|b % a 输出结果 0**|幂 - 返回x的y次幂|a**b 为10的20次方， 输出结果 100000000000000000000//|取整除 - 返回商的整数部分（向下取整）|9//2=4 -9//2=5","text":"算术运算符假设 a = 10，b = 20运算符|描述|实例–|–|–+|加 - 两个对象相加|a + b 输出结果 30-|减 - 得到负数或是一个数减去另一个数|a - b 输出结果 -10*|乘 - 两个数相乘或是返回一个被重复若干次的字符串|a * b 输出结果 200/|除 - x除以y|b / a 输出结果 2%|取模 - 返回除法的余数|b % a 输出结果 0**|幂 - 返回x的y次幂|a**b 为10的20次方， 输出结果 100000000000000000000//|取整除 - 返回商的整数部分（向下取整）|9//2=4 -9//2=5 比较运算符 运算符 描述 实例 == 等于 - 比较对象是否相等 (a == b) 返回 False。 != 不等于 - 比较两个对象是否不相等 (a != b) 返回 true. &lt;&gt; 不等于 - 比较两个对象是否不相等。python3 已废弃。 (a &lt;&gt; b) 返回 true。这个运算符类似 != 。 &gt; 大于 - 返回x是否大于y (a &gt; b) 返回 False。 &lt; 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 (a &lt; b) 返回 true。 &gt;= 大于等于 - 返回x是否大于等于y。 (a &gt;= b) 返回 False。 &lt;= 小于等于 - 返回x是否小于等于y。 (a &lt;= b) 返回 true。 赋值运算符 运算符 描述 实例 = 简单的赋值运算符 c = a + b 将 a + b 的运算结果赋值为 c += 加法赋值运算符 c += a 等效于 c = c + a -= 减法赋值运算符 c -= a 等效于 c = c - a *= 乘法赋值运算符 c *= a 等效于 c = c * a /= 除法赋值运算符 c /= a 等效于 c = c / a %= 取模赋值运算符 c %= a 等效于 c = c % a **= 幂赋值运算符 c **= a 等效于 c = c ** a //= 取整除赋值运算符 c //= a 等效于 c = c // a 位运算符 运算符 描述 实例 &amp; 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0 (a &amp; b) 输出结果 12 ，二进制解释： 0000 1100 | 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。 (a | b) 输出结果 61 ，二进制解释： 0011 1101 ^ 按位异或运算符：当两对应的二进位相异时，结果为1 (a ^ b) 输出结果 49 ，二进制解释： 0011 0001 ~ 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1 (~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。 &lt;&lt; 左移动运算符：运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数字指定了移动的位数，高位丢弃，低位补0。 a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000 &gt;&gt; 右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，&gt;&gt; 右边的数字指定了移动的位数 a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111 逻辑运算符 运算符 逻辑表达式 描述 实例 and x and y 布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。 (a and b) 返回 20。 or x or y 布尔”或” - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。 (a or b) 返回 10。 not not x 布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not(a and b) 返回 False 成员运算符 运算符 描述 实例 in 如果在指定的序列中找到值返回 True，否则返回 False。 x 在 y 序列中 , 如果 x 在 y 序列中返回 True。 not in 如果在指定的序列中没有找到值返回 True，否则返回 False。 x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。 身份运算符 运算符 描述 实例 is is 是判断两个标识符是不是引用自一个对象 x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False is not is not 是判断两个标识符是不是引用自不同对象 x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。 运算符优先级 运算符 描述 ** 指数 (最高优先级) ~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) * / % // 乘，除，取模和取整除 + - 加法减法 &gt;&gt; &lt;&lt; 右移，左移运算符 &amp; 位 ‘AND’ ^ | 位运算符 &lt;= &lt; &gt; &gt;= 比较运算符 &lt;&gt; == != 等于运算符 = %= /= //= -= += *= **= 赋值运算符 is is not 身份运算符 in not in 成员运算符 not and or 逻辑运算符","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"python turtle库","slug":"python-turtle库","date":"2021-04-06T02:33:05.000Z","updated":"2021-04-12T02:46:34.186Z","comments":true,"path":"wiki/python-turtle库/","link":"","permalink":"http://example.com/wiki/python-turtle%E5%BA%93/","excerpt":"画布(canvas)画布就是turtle为我们展开用于绘图区域, 我们可以设置它的大小和初始位置。 设置画布大小 1turtle.screensize(canvwidth&#x3D;None, canvheight&#x3D;None, bg&#x3D;None) 参数分别为画布的宽(单位像素), 高, 背景颜色如:12turtle.screensize(800, 600, &quot;green&quot;)turtle.screensize() #返回默认大小(400, 300)","text":"画布(canvas)画布就是turtle为我们展开用于绘图区域, 我们可以设置它的大小和初始位置。 设置画布大小 1turtle.screensize(canvwidth&#x3D;None, canvheight&#x3D;None, bg&#x3D;None) 参数分别为画布的宽(单位像素), 高, 背景颜色如:12turtle.screensize(800, 600, &quot;green&quot;)turtle.screensize() #返回默认大小(400, 300) 1turtle.setup(width&#x3D;0.5, height&#x3D;0.75, startx&#x3D;None, starty&#x3D;None) 参数: width, height: 输入宽和高为整数时, 表示像素; 为小数时, 表示占据电脑屏幕的比例 (startx, starty): 这一坐标表示 矩形窗口左上角顶点的位置, 如果为空,则窗口位于屏幕中心如:12turtle.setup(width&#x3D;0.6, height&#x3D;0.6)turtle.setup(width&#x3D;800, height&#x3D;800, startx&#x3D;100, starty&#x3D;100) 画笔画笔的状态在画布上,默认有一个坐标原点为画布中心的坐标轴, 坐标原点上有一只面朝x轴正方向小乌龟. 这里我们描述小乌龟时使用了两个词语:坐标原点(位置),面朝x轴正方向(方向), turtle绘图中, 就是使用位置方向描述小乌龟(画笔)的状态 画笔的属性 命令 说明 turtle.pensize() 设置画笔宽度 turtle.pencolor() 设置画笔颜色，常用颜色{white,black,grey,dark,green,gold,violet,purple},也可以是RGB 3元组 turtle.speed() 设置画笔移动速度,画笔绘制的速度范围[0,10]整数, 数字越大越快 turtle.isvisible() 返回当前turtle是否可见 turtle.hideturtle() 隐藏箭头 turtle.showturtle() 显示箭头 turtle.shape() 设置海龟形状为指定的形状名 绘图命令操纵海龟绘图有着许多的命令,这些命令可以划分为3种:一种为运动命令，一种为画笔控制命令,还有一种是全局控制命令 命令 说明 turtle.penup() 抬起画笔，之后移动画笔不绘制形状 turtle.pendown() 落下画笔，之后移动画笔绘制形状 turtle.forward(distance) 画笔向前移动distance距离 turtle.bacKward(distance) 画笔向后移动distance距离 turtle.right(degree)/turtle.left(degree) 绘制方向向右/左旋转degree度 turtle.setheading(to_angle) 设置海龟的朝向,0 - 东/90 - 北/180 - 西/270 - 南 turtle.setx(x) 设置海龟的横坐标 turtle.sety(y) 设置海龟的纵坐标 turtle.goto(x, y)/turtle.setposition(x, y) 移动到一个绝对坐标 turtle.home() 移至初始坐标 turtle.circle(radius, extent=None, steps=None) 画一个圆，半径为radius,角度为extent(默认360度),步长为step,可以以此画正多边形 turtle.fillcolor(colorstring) 绘制图形的填充颜色 turtle.color(color1, color2) 同时设置pencolor=color1，fillcolor=color2 turtle.filling() 返回当前是否在填充状态 turtle.begin_fill() 准备开始填充图形 turtle.end_fill() 填充完毕 turtle.clear() 清空turtle窗口，但是turtle的位置和状态不会改变 turtle.reset() 清空窗口，重置turtle状态为起始状态 turtle.undo() 撤销上一个turtle动作 turtle.stamp() 在海龟当前位置印制一个海龟形状 turtle.clearstamps(n=None) 删除全部或前/后 n 个海龟印章 turtle.write(s, font=(“font-name”,font-size,”font-type”)) 写文本 参考资料 python绘图工具turtle库的使用详解 turtle — 海龟绘图","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"},{"name":"库","slug":"python/库","permalink":"http://example.com/categories/python/%E5%BA%93/"}],"tags":[]},{"title":"python 基础","slug":"python-基础","date":"2021-04-06T02:28:32.000Z","updated":"2021-04-06T07:41:37.037Z","comments":true,"path":"wiki/python-基础/","link":"","permalink":"http://example.com/wiki/python-%E5%9F%BA%E7%A1%80/","excerpt":"Python 标识符在 Python 里，标识符由字母、数字、下划线组成。 在 Python 中，所有标识符可以包括英文、数字以及下划线 $_$，但不能以数字开头。 Python 中的标识符是区分大小写的。 以下划线开头的标识符是有特殊意义的。以单下划线开头 $_foo$ 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 $from xxx import *$ 而导入。 以双下划线开头的 $__foo$ 代表类的私有成员，以双下划线开头和结尾的 $foo$ 代表 Python 里特殊方法专用的标识，如 $init()$ 代表类的构造函数。 Python 保留字符 andexecnot assertfinallyor breakforpass classfromprint continueglobalraise defifreturn delimporttry elifinwhile elseiswith exceptlambdayield","text":"Python 标识符在 Python 里，标识符由字母、数字、下划线组成。 在 Python 中，所有标识符可以包括英文、数字以及下划线 $_$，但不能以数字开头。 Python 中的标识符是区分大小写的。 以下划线开头的标识符是有特殊意义的。以单下划线开头 $_foo$ 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 $from xxx import *$ 而导入。 以双下划线开头的 $__foo$ 代表类的私有成员，以双下划线开头和结尾的 $foo$ 代表 Python 里特殊方法专用的标识，如 $init()$ 代表类的构造函数。 Python 保留字符 andexecnot assertfinallyor breakforpass classfromprint continueglobalraise defifreturn delimporttry elifinwhile elseiswith exceptlambdayield 同一行显示多条语句Python可以在同一行中使用多条语句，语句之间使用分号(;)分割。eg: 1import sys; x = &#x27;runoob&#x27;; sys.stdout.write(x + &#x27;\\n&#x27;) print输出123456789# 换行输出print(x)print(y)# 不换行输出print(x,)print(y)# 或print(x,y) 行和缩进Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。 Python注释1234567# 单行注释&#x27;&#x27;&#x27;多行注释多行注释多行注释&#x27;&#x27;&#x27; 标准数据类型 Numbers（数字） String（字符串） List（列表） Tuple（元组） Dictionary（字典） Python数据类型转换 函数 描述 int(x [,base]) 将x转换为一个整数 long(x [,base] ) 将x转换为一个长整数 float(x) 将x转换到一个浮点数 complex(real [,imag]) 创建一个复数 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 set(s) 转换为可变集合 dict(d) 创建一个字典。d 必须是一个序列 (key,value)元组。 frozenset(s) 转换为不可变集合 chr(x) 将一个整数转换为一个字符 unichr(x) 将一个整数转换为Unicode字符 ord(x) 将一个字符转换为它的整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"将hexo博客部署到服务器","slug":"服务器-将hexo博客部署到服务器","date":"2021-04-01T01:47:27.000Z","updated":"2021-04-05T09:33:46.090Z","comments":true,"path":"wiki/服务器-将hexo博客部署到服务器/","link":"","permalink":"http://example.com/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"准备 服务器：阿里云轻量级服务器、centos7.3、1核、2G内存 hexo博客：Next主题，已经完成本地调试","text":"准备 服务器：阿里云轻量级服务器、centos7.3、1核、2G内存 hexo博客：Next主题，已经完成本地调试 步骤本地计算机本地先生成 ssh 密钥，打开cmd 1ssh-keygen -t rsa 一路回车即可。之后进入 C:\\Users\\用户名.ssh 文件夹（是隐藏文件，再文件查看中勾选隐藏文件），用记事本打开 id_rsa.pub 文件，复制并备用。 服务器初学者建议安装宝塔面版进行操作 更新系统1sudo yum update -y 安装Node.js1sudo yum install nodejs 安装Git1sudo apt-get install git 检查安装123node -vnpm -vgit --version 安装NginxNginx安装可以通过宝塔安装，或者自行百度。 创建新的git用户并给其权限1234567891011121314$ adduser git #创建一个用户git$ sudo passwd git #设置git用户密码输入密码，密码太简单会给警告。$ chmod 740 &#x2F;etc&#x2F;sudoers #修改文件权限为用户可读写执行$ vim &#x2F;etc&#x2F;sudoers #编辑文件按 i 键进入编辑模式找到这里 “root ALL&#x3D;(ALL) ALL”在下面输入 “git ALL&#x3D;(ALL) ALL”按esc进入视图模式，再输入 :wq 保存退出$ chmod 400 &#x2F;etc&#x2F;sudoers &#x2F;&#x2F;改回权限 创建密钥文件12345678$ su git$ mkdir ~&#x2F;.ssh$ vim ~&#x2F;.ssh&#x2F;authorized_keys# 把之前复制的 id_rsa.pub 文件粘贴到这$ chmod 600 &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys$ chmod 700 &#x2F;home&#x2F;git&#x2F;.ssh 测试 ssh 连接本地打开cmd窗口1ssh -v git@服务器ip 输入密码后显示类似 Welcome to Alibaba Cloud Elastic Compute Service ! （我是阿里云服务器）的语句就说明你链接成功了。 创建网站的根目录123su rootmkdir &#x2F;home&#x2F;hexo # 此目录为网站的根目录chown git:git -R &#x2F;home&#x2F;hexo 配置 Nginx我是直接使用了宝塔创建站点，比较方便如果要自己手动配置1vim conf&#x2F;nginx.conf 配置文件样例:1234567891011121314151617181920212223242526272829server&#123; listen 80; # 监听的端口，默认是80 server_name _; # 你的域名，没有的话可以随便填，然后用端口访问; index index.php index.html index.htm default.php default.htm default.html; root &#x2F;home&#x2F;hexo; # 网站根目录 # 下面的无所谓，可以只写一个location &#x2F; &#123;&#125; location ~ ^&#x2F;(\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md) &#123; return 404; &#125; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; error_log &#x2F;dev&#x2F;null; access_log &#x2F;dev&#x2F;null; &#125; location ~ .*\\.(js|css)?$ &#123; expires 12h; error_log &#x2F;dev&#x2F;null; access_log &#x2F;dev&#x2F;null; &#125; access_log &#x2F;www&#x2F;wwwlogs&#x2F;47.105.106.249.log; error_log &#x2F;www&#x2F;wwwlogs&#x2F;47.105.106.249.error.log;&#125; 建立 git 裸库1234su rootcd &#x2F;home&#x2F;git # 在 git 用户目录下创建git init --bare hexo.gitchown git:git -R hexo.git 使用 git-hooks 同步网站根目录1vim hexo.git&#x2F;hooks&#x2F;post-receive 填入以下内容，如果根目录和仓库目录和我设的不一样就自己改一下12#!&#x2F;bin&#x2F;shgit --work-tree&#x3D;&#x2F;home&#x2F;hexo --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;hexo.git checkout -f 完成后赋予权限12$ chown -R git:git &#x2F;home&#x2F;git&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive$ chmod +x &#x2F;home&#x2F;git&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive 配置本地 Hexo 站点文件并部署1234deploy: type: git repo: git@SERVER:&#x2F;home&#x2F;git&#x2F;hexo.git # 填写你的服务器地址 将SERVER替换掉 branch: master # 分支 之后 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d。打开刚刚设置的站点，部署成功。 各种问题 [emerg] getpwnam(“www”) failed 信息：Nginx的错误日志中给出如下信息：[emerg] 65814#0: getpwnam(“www”) failed 原因：没有创建www这个用户 解决：创建组和用户12&#x2F;usr&#x2F;sbin&#x2F;groupadd -f www&#x2F;usr&#x2F;sbin&#x2F;useradd -g www www existing lock file /etc/subgid.lock without a PID 信息：useradd git -g git 后显示 useradd: existing lock file /etc/subgid.lock without a PID（也会有类似的文件） 原因：这个文件 解决：删除即可12rm -rf &#x2F;etc&#x2F;subgid.lock useradd git -g git Host key verification failed. 信息：ssh -v git@服务器ip 后显示 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 原因：重置过服务器 解决：ssh-keygen -R IP地址 参考资料 hexo部署云服务器的全过程 Nginx错误：[emerg] getpwnam(“www”) failed linux下增加useradd提示existing lock file /etc/subgid.lock without a PID 解决Host key verification failed.(亲测有效)","categories":[{"name":"服务器","slug":"服务器","permalink":"http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[]},{"title":"centOS7服务器防火墙","slug":"服务器-centOS7服务器防火墙","date":"2021-03-30T12:48:59.000Z","updated":"2021-03-30T12:52:17.149Z","comments":true,"path":"wiki/服务器-centOS7服务器防火墙/","link":"","permalink":"http://example.com/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8-centOS7%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99/","excerpt":"查看防火墙状态 1systemctl status firewalld running 状态即防火墙已经开启dead 状态即防火墙未开启","text":"查看防火墙状态 1systemctl status firewalld running 状态即防火墙已经开启dead 状态即防火墙未开启 开启防火墙 1systemctl start firewalld 关闭防火墙 1systemctl stop firewalld 查看端口是否已开 1firewall-cmd --query-port&#x3D;8888&#x2F;tcp 提示yes表示已开通，提示no表示未开通。 开放端口号 1firewall-cmd --add-port&#x3D;8888&#x2F;tcp --permanent 提示success表示成功。 开放一个范围的端口 1firewall-cmd --add-port&#x3D;8000-9999&#x2F;tcp --permanent 重新载入配置 1firewall-cmd --reload 关闭端口 1firewall-cmd --permanent --remove-port&#x3D;8888&#x2F;tcp 参考资料","categories":[{"name":"服务器","slug":"服务器","permalink":"http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"防火墙","slug":"防火墙","permalink":"http://example.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"}]},{"title":"jetbrain学生认证","slug":"杂项-jetbrain学生认证","date":"2021-03-29T08:47:26.000Z","updated":"2021-04-07T09:18:48.346Z","comments":true,"path":"wiki/杂项-jetbrain学生认证/","link":"","permalink":"http://example.com/wiki/%E6%9D%82%E9%A1%B9-jetbrain%E5%AD%A6%E7%94%9F%E8%AE%A4%E8%AF%81/","excerpt":"注：该方法有效期一年，过期须重新认证。 进入 学生免费申请界面 完成注册和登录 点击 Apply now ，进入学生认证。","text":"注：该方法有效期一年，过期须重新认证。 进入 学生免费申请界面 完成注册和登录 点击 Apply now ，进入学生认证。 因为白嫖党太多了，现在没法用学生邮箱认证，只能用官方文件 填写信息官方文件建议用学生证，里面的信息拍清楚。参考： 点击 申请免费产品 提交成功 等待一周左右，官方会给你发消息通知你申请成功 查看 许可证 下载 Jet Brain 的软件，填写许可证即可免费使用","categories":[{"name":"杂项","slug":"杂项","permalink":"http://example.com/categories/%E6%9D%82%E9%A1%B9/"}],"tags":[]},{"title":"考研流程","slug":"考研-考研流程","date":"2021-03-29T07:19:25.000Z","updated":"2021-04-05T09:34:45.538Z","comments":true,"path":"wiki/考研-考研流程/","link":"","permalink":"http://example.com/wiki/%E8%80%83%E7%A0%94-%E8%80%83%E7%A0%94%E6%B5%81%E7%A8%8B/","excerpt":"","text":"总流程图 初试时间12月最后一个周末。 周六 8:30 - 11:30 政治 14:00 - 17:00 外语 周日 8:30 - 11:30 业务课1 14:00 - 17:00 业务课2 ps.考研不能提前离开考场 科目 政治满分100分，考研最简单的科目，因为考的很杂，而且有时事政治的内容，所有强烈建议报班跟着老师复习。单选题 16*1’、多选题 17*2’、论述题 5*10’ 外语 业务课1以我们计算机专业为例，业务课1就是考数学。数学分为数学一和数学二，其中数学一考高数、线代和概率论，数学二考高数、线代，并且数学一比数学二难一点。 业务课2 ##st=>start: 决定考研 e1=>end: 上岸 e2=>end: 再战、就业... c1=>condition: 初试(十二月最后一个周末) c2=>condition: 调剂复试(四月份) c3=>condition: 复试(四月份) c4=>condition: 通过国家线 op1=>operation: 网上预报名(十月份) op2=>operation: 正式报名和现场确认(十一月) op3=>operation: 联系调剂院校 op4=>operation: 拟录取(六月份) op5=>operation: ... st->op1->op2->c1(yes)->c3(yes)->op5->op4->e1 c1(no)->c4(no)->e2 c4(yes)->op3->c2(yes)->op4 c2(no)->e2 c3(no)->op3{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","categories":[{"name":"考研","slug":"考研","permalink":"http://example.com/categories/%E8%80%83%E7%A0%94/"}],"tags":[]},{"title":"dp","slug":"算法-动态规划","date":"2021-03-29T06:48:50.000Z","updated":"2021-04-26T06:56:01.148Z","comments":true,"path":"wiki/算法-动态规划/","link":"","permalink":"http://example.com/wiki/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","excerpt":"算法介绍","text":"算法介绍 算法说明无优化例题参考资料","categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"spfa","slug":"算法-spfa","date":"2021-03-29T06:48:50.000Z","updated":"2021-03-29T08:38:28.453Z","comments":true,"path":"wiki/算法-spfa/","link":"","permalink":"http://example.com/wiki/%E7%AE%97%E6%B3%95-spfa/","excerpt":"算法介绍","text":"算法介绍 算法说明无优化1234567891011121314151617181920bool spfa(int s) &#123; vis[s] = 1;dis[s] = 0; queue&lt;int&gt; q; q.push(s); while (!q.empty()) &#123; int u = q.front(); q.pop(); vis[u] = 0; for (int i = head[u]; ~i; i = ed[i].ne) &#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w) &#123; dis[v] = dis[u] + w; if (!vis[v]) &#123; q.push(v), vis[v] = 1; if (++tim[v] &gt; n) return false; &#125; &#125; &#125; &#125; return true;&#125; SLF优化(双端队列优化)SLF:Small Label First就是如果要加入队列的值比队列头要小， 就把他放在队列头。 12345678910111213141516171819202122bool spfa(int st)&#123; vis[st] = 1; dis[st] = 0; deque&lt;int&gt;q; q.push_front(st); while(!q.empty())&#123; int u = q.front(); q.pop_front(); vis[u] = 0; for (int i = head[u]; ~i; i = ed[i].ne)&#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w)&#123; dis[v] = dis[u] + w; if (!vis[v])&#123; vis[v] = 1; // 优化 if (dis[v] &lt;= q.front()) q.push_front(dis[v]); else q.push_back(dis[v]); if (++tim[v] &gt; n) return false; &#125; &#125; &#125; &#125; return true;&#125; LLL优化LLL: Large label last和队列中的平均值比， 比平均值大就不更新放在队列后面 1234567891011121314151617181920212223242526bool spfa(int st)&#123; vis[st] = 1; dis[st] = 0; queue&lt;int&gt;q; q.push(st); int sum = 0, cnt_s = 1; while(!q.empty())&#123; int u = q.front(); q.pop(); if (u * cnt_s &gt; sum)&#123; q.push(u); continue; &#125; vis[u] = 0; sum -= dis[u], cnt_s--; for (int i = head[u]; ~i; i = ed[i].ne)&#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w)&#123; dis[v] = dis[u] + w; if (!vis[v])&#123; q.push(v), vis[v] = 1; sum += dis[v], cnt_s++; if (++tim[v] &gt; n) return false; &#125; &#125; &#125; &#125; return true;&#125; SLF + LLL（Large Label Last）1234567891011121314151617181920212223242526272829deque&lt;int&gt;q;inline bool spfa(int u)&#123; dis[u] = 0; vis[u] = 1; q.push_back(u); int num = 1; int sum = dis[u]; while(!q.empty())&#123; u = q.front(); while(num * dis[u] &gt; sum)&#123; q.pop_front();q.push_back(u); u = q.front(); &#125; q.pop_front(); vis[u] = 0; tim[u]++; if (tim[u] &gt; sqrt(n + m)) return 0; for (int i = head[u]; ~i; i = ed[i].ne)&#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w)&#123; dis[v] = dis[u] + w; if (!q.empty() &amp;&amp; dis[v] &gt; dis[q.front()]) q.push_back(v); else q.push_front(v); vis[v] = 1; &#125; &#125; &#125; return 1;&#125; 非连通块找负环12345678int ss=n+1;//找一个超级边，与其他边的距离为1，寻找一遍spfa(ss)找有没有非连通块的负权for (int i=1;i&lt;=n;i++)&#123; addedge(ss,i,0);// 注意 要是有向图 就得是这个顺序才行&#125;if (spfa(ss))&#123; ……&#125;init();//注意在初始化一遍 例题参考资料","categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"图论","slug":"算法/图论","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"},{"name":"最短路","slug":"算法/图论/最短路","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"}],"tags":[]},{"title":"Dijkstra","slug":"算法-Dijkstra","date":"2021-03-29T05:49:16.000Z","updated":"2021-03-29T08:38:32.718Z","comments":true,"path":"wiki/算法-Dijkstra/","link":"","permalink":"http://example.com/wiki/%E7%AE%97%E6%B3%95-Dijkstra/","excerpt":"算法介绍","text":"算法介绍 算法说明普通$n^2$版12345678910111213141516171819void dijk(int s) &#123; vis[s] = 1; for (int i = 1; i &lt;= n; i++) dis[i] = min(dis[i], ma[s][i]);//先给点1初始化距离 int index; //记录最短距离的下标 for (int i = 1; i &lt;= n - 1; i++) &#123; //找剩下的n-1 个点 int minn = INF; for (int j = 1; j &lt;= n; j++) &#123; if (!vis[j] &amp;&amp; minn &gt; dis[j]) &#123; minn = dis[j]; index = j; &#125; &#125; vis[index] = 1; for (int j = 1; j &lt;= n; j++) &#123; dis[j] = min(dis[j], ma[index][j] + minn);// 再根据minn更新dis &#125; &#125;&#125; 优先队列优化123456789101112131415void dijk(int s) &#123; priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; q; dis[s] = 0; q.push(P(0, s)); while (!q.empty()) &#123; int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; ~i; i = ed[i].ne) &#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w) dis[v] = dis[u] + w, q.push(P(dis[v], v)); &#125; &#125;&#125; 例题参考资料","categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"图论","slug":"算法/图论","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"},{"name":"最短路","slug":"算法/图论/最短路","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"}],"tags":[]}],"categories":[{"name":"杂项","slug":"杂项","permalink":"http://example.com/categories/%E6%9D%82%E9%A1%B9/"},{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"},{"name":"库","slug":"python/库","permalink":"http://example.com/categories/python/%E5%BA%93/"},{"name":"服务器","slug":"服务器","permalink":"http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"考研","slug":"考研","permalink":"http://example.com/categories/%E8%80%83%E7%A0%94/"},{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"图论","slug":"算法/图论","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"},{"name":"最短路","slug":"算法/图论/最短路","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"}],"tags":[{"name":"防火墙","slug":"防火墙","permalink":"http://example.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"}]}