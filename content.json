{"meta":{"title":"HsLotus的知识wiki","subtitle":"","description":"","author":"HsLotus","url":"http://example.com","root":"/"},"pages":[{"title":"About","date":"2021-03-28T08:31:00.722Z","updated":"2021-03-28T08:31:00.722Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2021-03-28T08:31:00.725Z","updated":"2021-03-28T08:31:00.725Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-03-28T08:31:00.746Z","updated":"2021-03-28T08:31:00.746Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"将hexo博客部署到服务器","slug":"将hexo博客部署到服务器","date":"2021-04-01T01:47:27.000Z","updated":"2021-04-05T09:20:37.594Z","comments":true,"path":"wiki/将hexo博客部署到服务器/","link":"","permalink":"http://example.com/wiki/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"准备 服务器：阿里云轻量级服务器、centos7.3、1核、2G内存 hexo博客：Next主题，已经完成本地调试","text":"准备 服务器：阿里云轻量级服务器、centos7.3、1核、2G内存 hexo博客：Next主题，已经完成本地调试 步骤本地计算机本地先生成 ssh 密钥，打开cmd1ssh-keygen -t rsa 一路回车即可。之后进入 C:\\Users\\用户名.ssh 文件夹（是隐藏文件，再文件查看中勾选隐藏文件），用记事本打开 id_rsa.pub 文件，复制并备用。 服务器初学者建议安装宝塔面版进行操作 更新系统1sudo yum update -y 安装Node.js1sudo yum install nodejs 安装Git1sudo apt-get install git 检查安装123node -vnpm -vgit --version 安装NginxNginx安装可以通过宝塔安装，或者自行百度。 创建新的git用户并给其权限1234567891011121314$ adduser git #创建一个用户git$ sudo passwd git #设置git用户密码输入密码，密码太简单会给警告。$ chmod 740 &#x2F;etc&#x2F;sudoers #修改文件权限为用户可读写执行$ vim &#x2F;etc&#x2F;sudoers #编辑文件按 i 键进入编辑模式找到这里 “root ALL&#x3D;(ALL) ALL”在下面输入 “git ALL&#x3D;(ALL) ALL”按esc进入视图模式，再输入 :wq 保存退出$ chmod 400 &#x2F;etc&#x2F;sudoers &#x2F;&#x2F;改回权限 创建密钥文件12345678$ su git$ mkdir ~&#x2F;.ssh$ vim ~&#x2F;.ssh&#x2F;authorized_keys# 把之前复制的 id_rsa.pub 文件粘贴到这$ chmod 600 &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys$ chmod 700 &#x2F;home&#x2F;git&#x2F;.ssh 测试 ssh 连接本地打开cmd窗口1ssh -v git@服务器ip 输入密码后显示类似 Welcome to Alibaba Cloud Elastic Compute Service ! （我是阿里云服务器）的语句就说明你链接成功了。 创建网站的根目录123su rootmkdir &#x2F;home&#x2F;hexo # 此目录为网站的根目录chown git:git -R &#x2F;home&#x2F;hexo 配置 Nginx我是直接使用了宝塔创建站点，比较方便如果要自己手动配置1vim conf&#x2F;nginx.conf 配置文件样例:1234567891011121314151617181920212223242526272829server&#123; listen 80; # 监听的端口，默认是80 server_name _; # 你的域名，没有的话可以随便填，然后用端口访问; index index.php index.html index.htm default.php default.htm default.html; root &#x2F;home&#x2F;hexo; # 网站根目录 # 下面的无所谓，可以只写一个location &#x2F; &#123;&#125; location ~ ^&#x2F;(\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md) &#123; return 404; &#125; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; error_log &#x2F;dev&#x2F;null; access_log &#x2F;dev&#x2F;null; &#125; location ~ .*\\.(js|css)?$ &#123; expires 12h; error_log &#x2F;dev&#x2F;null; access_log &#x2F;dev&#x2F;null; &#125; access_log &#x2F;www&#x2F;wwwlogs&#x2F;47.105.106.249.log; error_log &#x2F;www&#x2F;wwwlogs&#x2F;47.105.106.249.error.log;&#125; 建立 git 裸库1234su rootcd &#x2F;home&#x2F;git # 在 git 用户目录下创建git init --bare hexo.gitchown git:git -R hexo.git 使用 git-hooks 同步网站根目录1vim hexo.git&#x2F;hooks&#x2F;post-receive 填入以下内容，如果根目录和仓库目录和我设的不一样就自己改一下12#!&#x2F;bin&#x2F;shgit --work-tree&#x3D;&#x2F;home&#x2F;hexo --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;hexo.git checkout -f 完成后赋予权限12$ chown -R git:git &#x2F;home&#x2F;git&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive$ chmod +x &#x2F;home&#x2F;git&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive 配置本地 Hexo 站点文件并部署1234deploy: type: git repo: git@SERVER:&#x2F;home&#x2F;git&#x2F;hexo.git # 填写你的服务器地址 将SERVER替换掉 branch: master # 分支 之后 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d。打开刚刚设置的站点，部署成功。 各种问题 [emerg] getpwnam(“www”) failed 信息：Nginx的错误日志中给出如下信息：[emerg] 65814#0: getpwnam(“www”) failed 原因：没有创建www这个用户 解决：创建组和用户12&#x2F;usr&#x2F;sbin&#x2F;groupadd -f www&#x2F;usr&#x2F;sbin&#x2F;useradd -g www www existing lock file /etc/subgid.lock without a PID 信息：useradd git -g git 后显示 useradd: existing lock file /etc/subgid.lock without a PID（也会有类似的文件） 原因：这个文件 解决：删除即可12rm -rf &#x2F;etc&#x2F;subgid.lock useradd git -g git Host key verification failed. 信息：ssh -v git@服务器ip 后显示 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 原因：重置过服务器 解决：ssh-keygen -R IP地址 参考资料 hexo部署云服务器的全过程 Nginx错误：[emerg] getpwnam(“www”) failed linux下增加useradd提示existing lock file /etc/subgid.lock without a PID 解决Host key verification failed.(亲测有效)","categories":[{"name":"服务器","slug":"服务器","permalink":"http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[]},{"title":"centOS7服务器防火墙","slug":"centOS7服务器防火墙","date":"2021-03-30T12:48:59.000Z","updated":"2021-03-30T12:52:17.149Z","comments":true,"path":"wiki/centOS7服务器防火墙/","link":"","permalink":"http://example.com/wiki/centOS7%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99/","excerpt":"查看防火墙状态 1systemctl status firewalld running 状态即防火墙已经开启dead 状态即防火墙未开启","text":"查看防火墙状态 1systemctl status firewalld running 状态即防火墙已经开启dead 状态即防火墙未开启 开启防火墙 1systemctl start firewalld 关闭防火墙 1systemctl stop firewalld 查看端口是否已开 1firewall-cmd --query-port&#x3D;8888&#x2F;tcp 提示yes表示已开通，提示no表示未开通。 开放端口号 1firewall-cmd --add-port&#x3D;8888&#x2F;tcp --permanent 提示success表示成功。 开放一个范围的端口 1firewall-cmd --add-port&#x3D;8000-9999&#x2F;tcp --permanent 重新载入配置 1firewall-cmd --reload 关闭端口 1firewall-cmd --permanent --remove-port&#x3D;8888&#x2F;tcp 参考资料","categories":[{"name":"服务器","slug":"服务器","permalink":"http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"防火墙","slug":"防火墙","permalink":"http://example.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"}]},{"title":"jetbrain学生认证","slug":"jetbrain学生认证","date":"2021-03-29T08:47:26.000Z","updated":"2021-03-30T12:53:05.077Z","comments":true,"path":"wiki/jetbrain学生认证/","link":"","permalink":"http://example.com/wiki/jetbrain%E5%AD%A6%E7%94%9F%E8%AE%A4%E8%AF%81/","excerpt":"","text":"参考资料","categories":[{"name":"杂项","slug":"杂项","permalink":"http://example.com/categories/%E6%9D%82%E9%A1%B9/"}],"tags":[]},{"title":"考研流程","slug":"考研流程","date":"2021-03-29T07:19:25.000Z","updated":"2021-03-29T08:34:16.154Z","comments":true,"path":"wiki/考研流程/","link":"","permalink":"http://example.com/wiki/%E8%80%83%E7%A0%94%E6%B5%81%E7%A8%8B/","excerpt":"","text":"总流程图 初试时间12月最后一个周末。 周六 8:30 - 11:30 政治 14:00 - 17:00 外语 周日 8:30 - 11:30 业务课1 14:00 - 17:00 业务课2 ps.考研不能提前离开考场 科目 政治满分100分，考研最简单的科目，因为考的很杂，而且有时事政治的内容，所有强烈建议报班跟着老师复习。单选题 16*1’、多选题 17*2’、论述题 5*10’ 外语 业务课1以我们计算机专业为例，业务课1就是考数学。数学分为数学一和数学二，其中数学一考高数、线代和概率论，数学二考高数、线代，并且数学一比数学二难一点。 业务课2 ##st=>start: 决定考研 e1=>end: 上岸 e2=>end: 再战、就业... c1=>condition: 初试(十二月最后一个周末) c2=>condition: 调剂复试(四月份) c3=>condition: 复试(四月份) c4=>condition: 通过国家线 op1=>operation: 网上预报名(十月份) op2=>operation: 正式报名和现场确认(十一月) op3=>operation: 联系调剂院校 op4=>operation: 拟录取(六月份) op5=>operation: ... st->op1->op2->c1(yes)->c3(yes)->op5->op4->e1 c1(no)->c4(no)->e2 c4(yes)->op3->c2(yes)->op4 c2(no)->e2 c3(no)->op3{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","categories":[{"name":"考研","slug":"考研","permalink":"http://example.com/categories/%E8%80%83%E7%A0%94/"}],"tags":[]},{"title":"spfa","slug":"spfa","date":"2021-03-29T06:48:50.000Z","updated":"2021-03-29T08:38:28.453Z","comments":true,"path":"wiki/spfa/","link":"","permalink":"http://example.com/wiki/spfa/","excerpt":"算法介绍","text":"算法介绍 算法说明无优化1234567891011121314151617181920bool spfa(int s) &#123; vis[s] = 1;dis[s] = 0; queue&lt;int&gt; q; q.push(s); while (!q.empty()) &#123; int u = q.front(); q.pop(); vis[u] = 0; for (int i = head[u]; ~i; i = ed[i].ne) &#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w) &#123; dis[v] = dis[u] + w; if (!vis[v]) &#123; q.push(v), vis[v] = 1; if (++tim[v] &gt; n) return false; &#125; &#125; &#125; &#125; return true;&#125; SLF优化(双端队列优化)SLF:Small Label First就是如果要加入队列的值比队列头要小， 就把他放在队列头。 12345678910111213141516171819202122bool spfa(int st)&#123; vis[st] = 1; dis[st] = 0; deque&lt;int&gt;q; q.push_front(st); while(!q.empty())&#123; int u = q.front(); q.pop_front(); vis[u] = 0; for (int i = head[u]; ~i; i = ed[i].ne)&#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w)&#123; dis[v] = dis[u] + w; if (!vis[v])&#123; vis[v] = 1; // 优化 if (dis[v] &lt;= q.front()) q.push_front(dis[v]); else q.push_back(dis[v]); if (++tim[v] &gt; n) return false; &#125; &#125; &#125; &#125; return true;&#125; LLL优化LLL: Large label last和队列中的平均值比， 比平均值大就不更新放在队列后面 1234567891011121314151617181920212223242526bool spfa(int st)&#123; vis[st] = 1; dis[st] = 0; queue&lt;int&gt;q; q.push(st); int sum = 0, cnt_s = 1; while(!q.empty())&#123; int u = q.front(); q.pop(); if (u * cnt_s &gt; sum)&#123; q.push(u); continue; &#125; vis[u] = 0; sum -= dis[u], cnt_s--; for (int i = head[u]; ~i; i = ed[i].ne)&#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w)&#123; dis[v] = dis[u] + w; if (!vis[v])&#123; q.push(v), vis[v] = 1; sum += dis[v], cnt_s++; if (++tim[v] &gt; n) return false; &#125; &#125; &#125; &#125; return true;&#125; SLF + LLL（Large Label Last）1234567891011121314151617181920212223242526272829deque&lt;int&gt;q;inline bool spfa(int u)&#123; dis[u] = 0; vis[u] = 1; q.push_back(u); int num = 1; int sum = dis[u]; while(!q.empty())&#123; u = q.front(); while(num * dis[u] &gt; sum)&#123; q.pop_front();q.push_back(u); u = q.front(); &#125; q.pop_front(); vis[u] = 0; tim[u]++; if (tim[u] &gt; sqrt(n + m)) return 0; for (int i = head[u]; ~i; i = ed[i].ne)&#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w)&#123; dis[v] = dis[u] + w; if (!q.empty() &amp;&amp; dis[v] &gt; dis[q.front()]) q.push_back(v); else q.push_front(v); vis[v] = 1; &#125; &#125; &#125; return 1;&#125; 非连通块找负环12345678int ss=n+1;//找一个超级边，与其他边的距离为1，寻找一遍spfa(ss)找有没有非连通块的负权for (int i=1;i&lt;=n;i++)&#123; addedge(ss,i,0);// 注意 要是有向图 就得是这个顺序才行&#125;if (spfa(ss))&#123; ……&#125;init();//注意在初始化一遍 例题参考资料","categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"图论","slug":"算法/图论","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"},{"name":"最短路","slug":"算法/图论/最短路","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"}],"tags":[]},{"title":"Dijkstra","slug":"Dijkstra","date":"2021-03-29T05:49:16.000Z","updated":"2021-03-29T08:38:32.718Z","comments":true,"path":"wiki/Dijkstra/","link":"","permalink":"http://example.com/wiki/Dijkstra/","excerpt":"算法介绍","text":"算法介绍 算法说明普通$n^2$版12345678910111213141516171819void dijk(int s) &#123; vis[s] = 1; for (int i = 1; i &lt;= n; i++) dis[i] = min(dis[i], ma[s][i]);//先给点1初始化距离 int index; //记录最短距离的下标 for (int i = 1; i &lt;= n - 1; i++) &#123; //找剩下的n-1 个点 int minn = INF; for (int j = 1; j &lt;= n; j++) &#123; if (!vis[j] &amp;&amp; minn &gt; dis[j]) &#123; minn = dis[j]; index = j; &#125; &#125; vis[index] = 1; for (int j = 1; j &lt;= n; j++) &#123; dis[j] = min(dis[j], ma[index][j] + minn);// 再根据minn更新dis &#125; &#125;&#125; 优先队列优化123456789101112131415void dijk(int s) &#123; priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; q; dis[s] = 0; q.push(P(0, s)); while (!q.empty()) &#123; int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; ~i; i = ed[i].ne) &#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w) dis[v] = dis[u] + w, q.push(P(dis[v], v)); &#125; &#125;&#125; 例题参考资料","categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"图论","slug":"算法/图论","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"},{"name":"最短路","slug":"算法/图论/最短路","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"}],"tags":[]}],"categories":[{"name":"服务器","slug":"服务器","permalink":"http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"杂项","slug":"杂项","permalink":"http://example.com/categories/%E6%9D%82%E9%A1%B9/"},{"name":"考研","slug":"考研","permalink":"http://example.com/categories/%E8%80%83%E7%A0%94/"},{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"图论","slug":"算法/图论","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"},{"name":"最短路","slug":"算法/图论/最短路","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"}],"tags":[{"name":"防火墙","slug":"防火墙","permalink":"http://example.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"}]}