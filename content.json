{"meta":{"title":"HsLotus的知识wiki","subtitle":"","description":"","author":"HsLotus","url":"http://example.com","root":"/"},"pages":[{"title":"Categories","date":"2021-03-28T08:31:00.725Z","updated":"2021-03-28T08:31:00.725Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-03-28T08:31:00.746Z","updated":"2021-03-28T08:31:00.746Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2021-03-28T08:31:00.722Z","updated":"2021-03-28T08:31:00.722Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"python-杂项","slug":"python-杂项","date":"2021-04-06T02:56:35.000Z","updated":"2021-04-06T03:20:14.149Z","comments":true,"path":"wiki/python-杂项/","link":"","permalink":"http://example.com/wiki/python-%E6%9D%82%E9%A1%B9/","excerpt":"等待用户输入1raw_input(&quot;按下 enter 键退出，其他任意键显示...\\n&quot;)","text":"等待用户输入1raw_input(&quot;按下 enter 键退出，其他任意键显示...\\n&quot;) 参考资料","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"python-numpy库","slug":"python-numpy库","date":"2021-04-06T02:56:13.000Z","updated":"2021-04-07T09:16:40.891Z","comments":true,"path":"wiki/python-numpy库/","link":"","permalink":"http://example.com/wiki/python-numpy%E5%BA%93/","excerpt":"","text":"参考资料","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"python-迭代器","slug":"python-迭代器","date":"2021-04-06T02:55:45.000Z","updated":"2021-04-07T09:16:59.285Z","comments":true,"path":"wiki/python-迭代器/","link":"","permalink":"http://example.com/wiki/python-%E8%BF%AD%E4%BB%A3%E5%99%A8/","excerpt":"","text":"参考资料","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"python-字符串","slug":"python-字符串","date":"2021-04-06T02:54:39.000Z","updated":"2021-04-07T09:16:44.383Z","comments":true,"path":"wiki/python-字符串/","link":"","permalink":"http://example.com/wiki/python-%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"参考资料","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"python-循环语句与条件语句","slug":"python-循环语句与条件语句","date":"2021-04-06T02:54:22.000Z","updated":"2021-04-07T09:16:54.412Z","comments":true,"path":"wiki/python-循环语句与条件语句/","link":"","permalink":"http://example.com/wiki/python-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/","excerpt":"if 条件语句12345678if 判断条件1: 执行语句1……elif 判断条件2: 执行语句2……elif 判断条件3: 执行语句3……else: 执行语句4……","text":"if 条件语句12345678if 判断条件1: 执行语句1……elif 判断条件2: 执行语句2……elif 判断条件3: 执行语句3……else: 执行语句4…… While 循环语句12while 判断条件(condition)： 执行语句(statements)…… For 循环语句12for iterating_var in sequence: statements(s) 循环嵌套实例：使用嵌套循环输出2~100之间的素数 12345678i = 2while(i &lt; 100): j = 2 while(j &lt;= (i/j)): if not(i%j): break j = j + 1 if (j &gt; i/j) : print i, &quot; 是素数&quot; i = i + 1 break 语句break语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。 123456var = 10while var &gt; 0: print &#x27;当前变量值 :&#x27;, var var = var -1 if var == 5: # 当变量 var 等于 5 时退出循环 break continue 语句continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。 123456var = 10while var &gt; 0: var = var -1 if var == 5: continue print &#x27;当前变量值 :&#x27;, var pass 语句Python pass 是空语句，是为了保持程序结构的完整性。 参考资料","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"python-运算符","slug":"python-运算符","date":"2021-04-06T02:53:48.000Z","updated":"2021-04-07T09:16:53.048Z","comments":true,"path":"wiki/python-运算符/","link":"","permalink":"http://example.com/wiki/python-%E8%BF%90%E7%AE%97%E7%AC%A6/","excerpt":"算术运算符假设 a = 10，b = 20运算符|描述|实例–|–|–+|加 - 两个对象相加|a + b 输出结果 30-|减 - 得到负数或是一个数减去另一个数|a - b 输出结果 -10*|乘 - 两个数相乘或是返回一个被重复若干次的字符串|a * b 输出结果 200/|除 - x除以y|b / a 输出结果 2%|取模 - 返回除法的余数|b % a 输出结果 0**|幂 - 返回x的y次幂|a**b 为10的20次方， 输出结果 100000000000000000000//|取整除 - 返回商的整数部分（向下取整）|9//2=4 -9//2=5","text":"算术运算符假设 a = 10，b = 20运算符|描述|实例–|–|–+|加 - 两个对象相加|a + b 输出结果 30-|减 - 得到负数或是一个数减去另一个数|a - b 输出结果 -10*|乘 - 两个数相乘或是返回一个被重复若干次的字符串|a * b 输出结果 200/|除 - x除以y|b / a 输出结果 2%|取模 - 返回除法的余数|b % a 输出结果 0**|幂 - 返回x的y次幂|a**b 为10的20次方， 输出结果 100000000000000000000//|取整除 - 返回商的整数部分（向下取整）|9//2=4 -9//2=5 比较运算符 运算符 描述 实例 == 等于 - 比较对象是否相等 (a == b) 返回 False。 != 不等于 - 比较两个对象是否不相等 (a != b) 返回 true. &lt;&gt; 不等于 - 比较两个对象是否不相等。python3 已废弃。 (a &lt;&gt; b) 返回 true。这个运算符类似 != 。 &gt; 大于 - 返回x是否大于y (a &gt; b) 返回 False。 &lt; 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 (a &lt; b) 返回 true。 &gt;= 大于等于 - 返回x是否大于等于y。 (a &gt;= b) 返回 False。 &lt;= 小于等于 - 返回x是否小于等于y。 (a &lt;= b) 返回 true。 赋值运算符 运算符 描述 实例 = 简单的赋值运算符 c = a + b 将 a + b 的运算结果赋值为 c += 加法赋值运算符 c += a 等效于 c = c + a -= 减法赋值运算符 c -= a 等效于 c = c - a *= 乘法赋值运算符 c *= a 等效于 c = c * a /= 除法赋值运算符 c /= a 等效于 c = c / a %= 取模赋值运算符 c %= a 等效于 c = c % a **= 幂赋值运算符 c **= a 等效于 c = c ** a //= 取整除赋值运算符 c //= a 等效于 c = c // a 位运算符 运算符 描述 实例 &amp; 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0 (a &amp; b) 输出结果 12 ，二进制解释： 0000 1100 | 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。 (a | b) 输出结果 61 ，二进制解释： 0011 1101 ^ 按位异或运算符：当两对应的二进位相异时，结果为1 (a ^ b) 输出结果 49 ，二进制解释： 0011 0001 ~ 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1 (~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。 &lt;&lt; 左移动运算符：运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数字指定了移动的位数，高位丢弃，低位补0。 a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000 &gt;&gt; 右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，&gt;&gt; 右边的数字指定了移动的位数 a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111 逻辑运算符 运算符 逻辑表达式 描述 实例 and x and y 布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。 (a and b) 返回 20。 or x or y 布尔”或” - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。 (a or b) 返回 10。 not not x 布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not(a and b) 返回 False 成员运算符 运算符 描述 实例 in 如果在指定的序列中找到值返回 True，否则返回 False。 x 在 y 序列中 , 如果 x 在 y 序列中返回 True。 not in 如果在指定的序列中没有找到值返回 True，否则返回 False。 x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。 身份运算符 运算符 描述 实例 is is 是判断两个标识符是不是引用自一个对象 x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False is not is not 是判断两个标识符是不是引用自不同对象 x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。 运算符优先级 运算符 描述 ** 指数 (最高优先级) ~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) * / % // 乘，除，取模和取整除 + - 加法减法 &gt;&gt; &lt;&lt; 右移，左移运算符 &amp; 位 ‘AND’ ^ | 位运算符 &lt;= &lt; &gt; &gt;= 比较运算符 &lt;&gt; == != 等于运算符 = %= /= //= -= += *= **= 赋值运算符 is is not 身份运算符 in not in 成员运算符 not and or 逻辑运算符","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"python turtle库","slug":"python-turtle库","date":"2021-04-06T02:33:05.000Z","updated":"2021-04-07T09:14:53.550Z","comments":true,"path":"wiki/python-turtle库/","link":"","permalink":"http://example.com/wiki/python-turtle%E5%BA%93/","excerpt":"画布(canvas)画布就是turtle为我们展开用于绘图区域, 我们可以设置它的大小和初始位置。 设置画布大小 1turtle.screensize(canvwidth&#x3D;None, canvheight&#x3D;None, bg&#x3D;None) 参数分别为画布的宽(单位像素), 高, 背景颜色 如: 12turtle.screensize(800, 600, &quot;green&quot;)turtle.screensize() #返回默认大小(400, 300)","text":"画布(canvas)画布就是turtle为我们展开用于绘图区域, 我们可以设置它的大小和初始位置。 设置画布大小 1turtle.screensize(canvwidth&#x3D;None, canvheight&#x3D;None, bg&#x3D;None) 参数分别为画布的宽(单位像素), 高, 背景颜色 如: 12turtle.screensize(800, 600, &quot;green&quot;)turtle.screensize() #返回默认大小(400, 300) 1turtle.setup(width&#x3D;0.5, height&#x3D;0.75, startx&#x3D;None, starty&#x3D;None) 参数: width, height: 输入宽和高为整数时, 表示像素; 为小数时, 表示占据电脑屏幕的比例 (startx, starty): 这一坐标表示 矩形窗口左上角顶点的位置, 如果为空,则窗口位于屏幕中心如:12turtle.setup(width&#x3D;0.6, height&#x3D;0.6)turtle.setup(width&#x3D;800, height&#x3D;800, startx&#x3D;100, starty&#x3D;100) 画笔画笔的状态在画布上,默认有一个坐标原点为画布中心的坐标轴, 坐标原点上有一只面朝x轴正方向小乌龟. 这里我们描述小乌龟时使用了两个词语:坐标原点(位置),面朝x轴正方向(方向), turtle绘图中, 就是使用位置方向描述小乌龟(画笔)的状态 画笔的属性 turtle.pensize()：设置画笔的宽度。 turtle.pencolor()：没有参数传入,返回当前画笔颜色,传入参数设置画笔颜色,可以是字符串如”green”, “red”,也可以是RGB 3元组, 12345&gt;&gt;&gt; pencolor(&#39;brown&#39;)&gt;&gt;&gt; tup &#x3D; (0.2, 0.8, 0.55)&gt;&gt;&gt; pencolor(tup)&gt;&gt;&gt; pencolor()&#39;#33cc8c&#39; turtle.speed(speed): 设置画笔移动速度,画笔绘制的速度范围[0,10]整数, 数字越大越快 绘图命令操纵海龟绘图有着许多的命令,这些命令可以划分为3种:一种为运动命令，一种为画笔控制命令,还有一种是全局控制命令 画笔运动命令: 命令 说明 turtle.forward(distance) 画笔向前移动distance距离 turtle.backforward(distance) 画笔向后移动distance距离 turtle.right(degree) 绘制方向向右旋转degree度 turtle.exitonclick() 点击关闭图形窗口 turtle.penup() 抬起画笔，之后移动画笔不绘制形状 turtle.pendown() 落下画笔，之后移动画笔绘制形状 turtle.pensize() 设置画笔宽度 turtle.pencolor() 设置画笔颜色，常用颜色{white,black,grey,dark,green,gold,violet,purple} 画笔控制命令: 命令 说明 turtle.pensize(width) 绘制图形时的宽度 turtle.pencolor() 画笔颜色 turtle.fillcolor(colorstring) 绘制图形的填充颜色 turtle.color(color1, color2) 同时设置pencolor=color1，fillcolor=color2 turtle.filling() 返回当前是否在填充状态 turtle.begin_fill() 准备开始填充图形 turtle.end_fill() 填充完毕 turtle.hideturtle() 隐藏箭头 turtle.showturtle() 显示箭头 全局控制命令 命令 说明 turtle.clear() 清空turtle窗口，但是turtle的位置和状态不会改变 turtle.reset() 清空窗口，重置turtle状态为起始状态 turtle.undo() 撤销上一个turtle动作 turtle.isvisible() 返回当前turtle是否可见 stamp() 复制当前图形 turtle.write(s, font=(“font-name”,font-size,”font-type”)) 写文本 参考资料 python绘图工具turtle库的使用详解","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"},{"name":"库","slug":"python/库","permalink":"http://example.com/categories/python/%E5%BA%93/"}],"tags":[]},{"title":"python 基础","slug":"python-基础","date":"2021-04-06T02:28:32.000Z","updated":"2021-04-06T07:41:37.037Z","comments":true,"path":"wiki/python-基础/","link":"","permalink":"http://example.com/wiki/python-%E5%9F%BA%E7%A1%80/","excerpt":"Python 标识符在 Python 里，标识符由字母、数字、下划线组成。 在 Python 中，所有标识符可以包括英文、数字以及下划线 $_$，但不能以数字开头。 Python 中的标识符是区分大小写的。 以下划线开头的标识符是有特殊意义的。以单下划线开头 $_foo$ 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 $from xxx import *$ 而导入。 以双下划线开头的 $__foo$ 代表类的私有成员，以双下划线开头和结尾的 $foo$ 代表 Python 里特殊方法专用的标识，如 $init()$ 代表类的构造函数。 Python 保留字符 andexecnot assertfinallyor breakforpass classfromprint continueglobalraise defifreturn delimporttry elifinwhile elseiswith exceptlambdayield","text":"Python 标识符在 Python 里，标识符由字母、数字、下划线组成。 在 Python 中，所有标识符可以包括英文、数字以及下划线 $_$，但不能以数字开头。 Python 中的标识符是区分大小写的。 以下划线开头的标识符是有特殊意义的。以单下划线开头 $_foo$ 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 $from xxx import *$ 而导入。 以双下划线开头的 $__foo$ 代表类的私有成员，以双下划线开头和结尾的 $foo$ 代表 Python 里特殊方法专用的标识，如 $init()$ 代表类的构造函数。 Python 保留字符 andexecnot assertfinallyor breakforpass classfromprint continueglobalraise defifreturn delimporttry elifinwhile elseiswith exceptlambdayield 同一行显示多条语句Python可以在同一行中使用多条语句，语句之间使用分号(;)分割。eg: 1import sys; x = &#x27;runoob&#x27;; sys.stdout.write(x + &#x27;\\n&#x27;) print输出123456789# 换行输出print(x)print(y)# 不换行输出print(x,)print(y)# 或print(x,y) 行和缩进Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。 Python注释1234567# 单行注释&#x27;&#x27;&#x27;多行注释多行注释多行注释&#x27;&#x27;&#x27; 标准数据类型 Numbers（数字） String（字符串） List（列表） Tuple（元组） Dictionary（字典） Python数据类型转换 函数 描述 int(x [,base]) 将x转换为一个整数 long(x [,base] ) 将x转换为一个长整数 float(x) 将x转换到一个浮点数 complex(real [,imag]) 创建一个复数 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 set(s) 转换为可变集合 dict(d) 创建一个字典。d 必须是一个序列 (key,value)元组。 frozenset(s) 转换为不可变集合 chr(x) 将一个整数转换为一个字符 unichr(x) 将一个整数转换为Unicode字符 ord(x) 将一个字符转换为它的整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"将hexo博客部署到服务器","slug":"将hexo博客部署到服务器","date":"2021-04-01T01:47:27.000Z","updated":"2021-04-05T09:33:46.090Z","comments":true,"path":"wiki/将hexo博客部署到服务器/","link":"","permalink":"http://example.com/wiki/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"准备 服务器：阿里云轻量级服务器、centos7.3、1核、2G内存 hexo博客：Next主题，已经完成本地调试","text":"准备 服务器：阿里云轻量级服务器、centos7.3、1核、2G内存 hexo博客：Next主题，已经完成本地调试 步骤本地计算机本地先生成 ssh 密钥，打开cmd 1ssh-keygen -t rsa 一路回车即可。之后进入 C:\\Users\\用户名.ssh 文件夹（是隐藏文件，再文件查看中勾选隐藏文件），用记事本打开 id_rsa.pub 文件，复制并备用。 服务器初学者建议安装宝塔面版进行操作 更新系统1sudo yum update -y 安装Node.js1sudo yum install nodejs 安装Git1sudo apt-get install git 检查安装123node -vnpm -vgit --version 安装NginxNginx安装可以通过宝塔安装，或者自行百度。 创建新的git用户并给其权限1234567891011121314$ adduser git #创建一个用户git$ sudo passwd git #设置git用户密码输入密码，密码太简单会给警告。$ chmod 740 &#x2F;etc&#x2F;sudoers #修改文件权限为用户可读写执行$ vim &#x2F;etc&#x2F;sudoers #编辑文件按 i 键进入编辑模式找到这里 “root ALL&#x3D;(ALL) ALL”在下面输入 “git ALL&#x3D;(ALL) ALL”按esc进入视图模式，再输入 :wq 保存退出$ chmod 400 &#x2F;etc&#x2F;sudoers &#x2F;&#x2F;改回权限 创建密钥文件12345678$ su git$ mkdir ~&#x2F;.ssh$ vim ~&#x2F;.ssh&#x2F;authorized_keys# 把之前复制的 id_rsa.pub 文件粘贴到这$ chmod 600 &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys$ chmod 700 &#x2F;home&#x2F;git&#x2F;.ssh 测试 ssh 连接本地打开cmd窗口1ssh -v git@服务器ip 输入密码后显示类似 Welcome to Alibaba Cloud Elastic Compute Service ! （我是阿里云服务器）的语句就说明你链接成功了。 创建网站的根目录123su rootmkdir &#x2F;home&#x2F;hexo # 此目录为网站的根目录chown git:git -R &#x2F;home&#x2F;hexo 配置 Nginx我是直接使用了宝塔创建站点，比较方便如果要自己手动配置1vim conf&#x2F;nginx.conf 配置文件样例:1234567891011121314151617181920212223242526272829server&#123; listen 80; # 监听的端口，默认是80 server_name _; # 你的域名，没有的话可以随便填，然后用端口访问; index index.php index.html index.htm default.php default.htm default.html; root &#x2F;home&#x2F;hexo; # 网站根目录 # 下面的无所谓，可以只写一个location &#x2F; &#123;&#125; location ~ ^&#x2F;(\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md) &#123; return 404; &#125; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; error_log &#x2F;dev&#x2F;null; access_log &#x2F;dev&#x2F;null; &#125; location ~ .*\\.(js|css)?$ &#123; expires 12h; error_log &#x2F;dev&#x2F;null; access_log &#x2F;dev&#x2F;null; &#125; access_log &#x2F;www&#x2F;wwwlogs&#x2F;47.105.106.249.log; error_log &#x2F;www&#x2F;wwwlogs&#x2F;47.105.106.249.error.log;&#125; 建立 git 裸库1234su rootcd &#x2F;home&#x2F;git # 在 git 用户目录下创建git init --bare hexo.gitchown git:git -R hexo.git 使用 git-hooks 同步网站根目录1vim hexo.git&#x2F;hooks&#x2F;post-receive 填入以下内容，如果根目录和仓库目录和我设的不一样就自己改一下12#!&#x2F;bin&#x2F;shgit --work-tree&#x3D;&#x2F;home&#x2F;hexo --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;hexo.git checkout -f 完成后赋予权限12$ chown -R git:git &#x2F;home&#x2F;git&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive$ chmod +x &#x2F;home&#x2F;git&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive 配置本地 Hexo 站点文件并部署1234deploy: type: git repo: git@SERVER:&#x2F;home&#x2F;git&#x2F;hexo.git # 填写你的服务器地址 将SERVER替换掉 branch: master # 分支 之后 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d。打开刚刚设置的站点，部署成功。 各种问题 [emerg] getpwnam(“www”) failed 信息：Nginx的错误日志中给出如下信息：[emerg] 65814#0: getpwnam(“www”) failed 原因：没有创建www这个用户 解决：创建组和用户12&#x2F;usr&#x2F;sbin&#x2F;groupadd -f www&#x2F;usr&#x2F;sbin&#x2F;useradd -g www www existing lock file /etc/subgid.lock without a PID 信息：useradd git -g git 后显示 useradd: existing lock file /etc/subgid.lock without a PID（也会有类似的文件） 原因：这个文件 解决：删除即可12rm -rf &#x2F;etc&#x2F;subgid.lock useradd git -g git Host key verification failed. 信息：ssh -v git@服务器ip 后显示 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 原因：重置过服务器 解决：ssh-keygen -R IP地址 参考资料 hexo部署云服务器的全过程 Nginx错误：[emerg] getpwnam(“www”) failed linux下增加useradd提示existing lock file /etc/subgid.lock without a PID 解决Host key verification failed.(亲测有效)","categories":[{"name":"服务器","slug":"服务器","permalink":"http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[]},{"title":"centOS7服务器防火墙","slug":"centOS7服务器防火墙","date":"2021-03-30T12:48:59.000Z","updated":"2021-03-30T12:52:17.149Z","comments":true,"path":"wiki/centOS7服务器防火墙/","link":"","permalink":"http://example.com/wiki/centOS7%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99/","excerpt":"查看防火墙状态 1systemctl status firewalld running 状态即防火墙已经开启dead 状态即防火墙未开启","text":"查看防火墙状态 1systemctl status firewalld running 状态即防火墙已经开启dead 状态即防火墙未开启 开启防火墙 1systemctl start firewalld 关闭防火墙 1systemctl stop firewalld 查看端口是否已开 1firewall-cmd --query-port&#x3D;8888&#x2F;tcp 提示yes表示已开通，提示no表示未开通。 开放端口号 1firewall-cmd --add-port&#x3D;8888&#x2F;tcp --permanent 提示success表示成功。 开放一个范围的端口 1firewall-cmd --add-port&#x3D;8000-9999&#x2F;tcp --permanent 重新载入配置 1firewall-cmd --reload 关闭端口 1firewall-cmd --permanent --remove-port&#x3D;8888&#x2F;tcp 参考资料","categories":[{"name":"服务器","slug":"服务器","permalink":"http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"防火墙","slug":"防火墙","permalink":"http://example.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"}]},{"title":"jetbrain学生认证","slug":"jetbrain学生认证","date":"2021-03-29T08:47:26.000Z","updated":"2021-04-07T08:39:30.694Z","comments":true,"path":"wiki/jetbrain学生认证/","link":"","permalink":"http://example.com/wiki/jetbrain%E5%AD%A6%E7%94%9F%E8%AE%A4%E8%AF%81/","excerpt":"JetBrain学生认证方法注：该方法有效期一年，过期须重新认证。 进入 学生免费申请界面 完成注册和登录 点击 Apply now ，进入学生认证。","text":"JetBrain学生认证方法注：该方法有效期一年，过期须重新认证。 进入 学生免费申请界面 完成注册和登录 点击 Apply now ，进入学生认证。 因为白嫖党太多了，现在没法用学生邮箱认证，只能用官方文件 填写信息官方文件建议用学生证，里面的信息拍清楚。参考： 点击 申请免费产品 提交成功 等待一周左右，官方会给你发消息通知你申请成功 查看 许可证 下载 Jet Brain 的软件，填写许可证即可免费使用","categories":[{"name":"杂项","slug":"杂项","permalink":"http://example.com/categories/%E6%9D%82%E9%A1%B9/"}],"tags":[]},{"title":"考研流程","slug":"考研流程","date":"2021-03-29T07:19:25.000Z","updated":"2021-04-05T09:34:45.538Z","comments":true,"path":"wiki/考研流程/","link":"","permalink":"http://example.com/wiki/%E8%80%83%E7%A0%94%E6%B5%81%E7%A8%8B/","excerpt":"","text":"总流程图 初试时间12月最后一个周末。 周六 8:30 - 11:30 政治 14:00 - 17:00 外语 周日 8:30 - 11:30 业务课1 14:00 - 17:00 业务课2 ps.考研不能提前离开考场 科目 政治满分100分，考研最简单的科目，因为考的很杂，而且有时事政治的内容，所有强烈建议报班跟着老师复习。单选题 16*1’、多选题 17*2’、论述题 5*10’ 外语 业务课1以我们计算机专业为例，业务课1就是考数学。数学分为数学一和数学二，其中数学一考高数、线代和概率论，数学二考高数、线代，并且数学一比数学二难一点。 业务课2 ##st=>start: 决定考研 e1=>end: 上岸 e2=>end: 再战、就业... c1=>condition: 初试(十二月最后一个周末) c2=>condition: 调剂复试(四月份) c3=>condition: 复试(四月份) c4=>condition: 通过国家线 op1=>operation: 网上预报名(十月份) op2=>operation: 正式报名和现场确认(十一月) op3=>operation: 联系调剂院校 op4=>operation: 拟录取(六月份) op5=>operation: ... st->op1->op2->c1(yes)->c3(yes)->op5->op4->e1 c1(no)->c4(no)->e2 c4(yes)->op3->c2(yes)->op4 c2(no)->e2 c3(no)->op3{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","categories":[{"name":"考研","slug":"考研","permalink":"http://example.com/categories/%E8%80%83%E7%A0%94/"}],"tags":[]},{"title":"spfa","slug":"spfa","date":"2021-03-29T06:48:50.000Z","updated":"2021-03-29T08:38:28.453Z","comments":true,"path":"wiki/spfa/","link":"","permalink":"http://example.com/wiki/spfa/","excerpt":"算法介绍","text":"算法介绍 算法说明无优化1234567891011121314151617181920bool spfa(int s) &#123; vis[s] = 1;dis[s] = 0; queue&lt;int&gt; q; q.push(s); while (!q.empty()) &#123; int u = q.front(); q.pop(); vis[u] = 0; for (int i = head[u]; ~i; i = ed[i].ne) &#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w) &#123; dis[v] = dis[u] + w; if (!vis[v]) &#123; q.push(v), vis[v] = 1; if (++tim[v] &gt; n) return false; &#125; &#125; &#125; &#125; return true;&#125; SLF优化(双端队列优化)SLF:Small Label First就是如果要加入队列的值比队列头要小， 就把他放在队列头。 12345678910111213141516171819202122bool spfa(int st)&#123; vis[st] = 1; dis[st] = 0; deque&lt;int&gt;q; q.push_front(st); while(!q.empty())&#123; int u = q.front(); q.pop_front(); vis[u] = 0; for (int i = head[u]; ~i; i = ed[i].ne)&#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w)&#123; dis[v] = dis[u] + w; if (!vis[v])&#123; vis[v] = 1; // 优化 if (dis[v] &lt;= q.front()) q.push_front(dis[v]); else q.push_back(dis[v]); if (++tim[v] &gt; n) return false; &#125; &#125; &#125; &#125; return true;&#125; LLL优化LLL: Large label last和队列中的平均值比， 比平均值大就不更新放在队列后面 1234567891011121314151617181920212223242526bool spfa(int st)&#123; vis[st] = 1; dis[st] = 0; queue&lt;int&gt;q; q.push(st); int sum = 0, cnt_s = 1; while(!q.empty())&#123; int u = q.front(); q.pop(); if (u * cnt_s &gt; sum)&#123; q.push(u); continue; &#125; vis[u] = 0; sum -= dis[u], cnt_s--; for (int i = head[u]; ~i; i = ed[i].ne)&#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w)&#123; dis[v] = dis[u] + w; if (!vis[v])&#123; q.push(v), vis[v] = 1; sum += dis[v], cnt_s++; if (++tim[v] &gt; n) return false; &#125; &#125; &#125; &#125; return true;&#125; SLF + LLL（Large Label Last）1234567891011121314151617181920212223242526272829deque&lt;int&gt;q;inline bool spfa(int u)&#123; dis[u] = 0; vis[u] = 1; q.push_back(u); int num = 1; int sum = dis[u]; while(!q.empty())&#123; u = q.front(); while(num * dis[u] &gt; sum)&#123; q.pop_front();q.push_back(u); u = q.front(); &#125; q.pop_front(); vis[u] = 0; tim[u]++; if (tim[u] &gt; sqrt(n + m)) return 0; for (int i = head[u]; ~i; i = ed[i].ne)&#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w)&#123; dis[v] = dis[u] + w; if (!q.empty() &amp;&amp; dis[v] &gt; dis[q.front()]) q.push_back(v); else q.push_front(v); vis[v] = 1; &#125; &#125; &#125; return 1;&#125; 非连通块找负环12345678int ss=n+1;//找一个超级边，与其他边的距离为1，寻找一遍spfa(ss)找有没有非连通块的负权for (int i=1;i&lt;=n;i++)&#123; addedge(ss,i,0);// 注意 要是有向图 就得是这个顺序才行&#125;if (spfa(ss))&#123; ……&#125;init();//注意在初始化一遍 例题参考资料","categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"图论","slug":"算法/图论","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"},{"name":"最短路","slug":"算法/图论/最短路","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"}],"tags":[]},{"title":"Dijkstra","slug":"Dijkstra","date":"2021-03-29T05:49:16.000Z","updated":"2021-03-29T08:38:32.718Z","comments":true,"path":"wiki/Dijkstra/","link":"","permalink":"http://example.com/wiki/Dijkstra/","excerpt":"算法介绍","text":"算法介绍 算法说明普通$n^2$版12345678910111213141516171819void dijk(int s) &#123; vis[s] = 1; for (int i = 1; i &lt;= n; i++) dis[i] = min(dis[i], ma[s][i]);//先给点1初始化距离 int index; //记录最短距离的下标 for (int i = 1; i &lt;= n - 1; i++) &#123; //找剩下的n-1 个点 int minn = INF; for (int j = 1; j &lt;= n; j++) &#123; if (!vis[j] &amp;&amp; minn &gt; dis[j]) &#123; minn = dis[j]; index = j; &#125; &#125; vis[index] = 1; for (int j = 1; j &lt;= n; j++) &#123; dis[j] = min(dis[j], ma[index][j] + minn);// 再根据minn更新dis &#125; &#125;&#125; 优先队列优化123456789101112131415void dijk(int s) &#123; priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; q; dis[s] = 0; q.push(P(0, s)); while (!q.empty()) &#123; int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; ~i; i = ed[i].ne) &#123; int v = ed[i].v, w = ed[i].w; if (dis[v] &gt; dis[u] + w) dis[v] = dis[u] + w, q.push(P(dis[v], v)); &#125; &#125;&#125; 例题参考资料","categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"图论","slug":"算法/图论","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"},{"name":"最短路","slug":"算法/图论/最短路","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"}],"tags":[]}],"categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"},{"name":"库","slug":"python/库","permalink":"http://example.com/categories/python/%E5%BA%93/"},{"name":"服务器","slug":"服务器","permalink":"http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"杂项","slug":"杂项","permalink":"http://example.com/categories/%E6%9D%82%E9%A1%B9/"},{"name":"考研","slug":"考研","permalink":"http://example.com/categories/%E8%80%83%E7%A0%94/"},{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"图论","slug":"算法/图论","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"},{"name":"最短路","slug":"算法/图论/最短路","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"}],"tags":[{"name":"防火墙","slug":"防火墙","permalink":"http://example.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"}]}